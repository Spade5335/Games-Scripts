Client = {
    Modules = {},
    Toggles = {
        Walkspeed = false,
        JumpPower = false,
        BHop = false,
        InstantRespawn = false,
        AntiAim = false,
        AutoAmmo = false,
        AutoHealth = false,
        Godmode = false,
        CrazyArrows = false,
        FFA = false,
        Baseball = false,
        Snow = false,
        Trac = false,
        Sight = false,
        FOV = false,
        GreenSmoke = false,
        Visiblecheck = false,
        SilentAim = false,
        FireRate = false,
        Bombs = false
    },
    Values = {JumpPower = 50, LookMeth = "Look Up", FOV = 150, ChatMsg = "", AimPart = "Head"}
}
function toggleNoClip()
    local a
    a =
        game:GetService("RunService").Stepped:connect(
        function()
            for b, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
                if noclipping == false then
                    a:Disconnect()
                    return
                end
                if v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end
    )
end
local function c(d, e, f)
    game.StarterGui:SetCore("SendNotification", {Title = d, Text = e, Icon = nil, Duration = f})
end
local g = {
    main = Color3.fromRGB(37, 37, 37),
    secondary = Color3.fromRGB(42, 42, 42),
    accent = Color3.fromRGB(255, 255, 255),
    accent2 = Color3.fromRGB(170, 170, 170)
}
if dark then
    getgenv().theme = {
        main = Color3.fromRGB(37, 37, 37),
        secondary = Color3.fromRGB(42, 42, 42),
        accent = Color3.fromRGB(255, 255, 255),
        accent2 = Color3.fromRGB(223, 223, 223)
    }
end
local h =
    setmetatable(
    {},
    {__index = function(i, j)
            return game:GetService(j)
        end, __newindex = function(i, k)
            i[k] = nil
            return
        end}
)
local l = h.Players
local m = l.LocalPlayer
local n = m:GetMouse()
local o = {
    flags = {},
    binds = {},
    objstorage = {},
    funcstorage = {},
    binding = false,
    tabinfo = {button = nil, tab = nil},
    destroyed = false,
    ui = nil,
    toggleui = function()
    end
}
function o.destroy()
    o.ui:Destroy()
    o.destroyed = true
end
local function p(q, r)
    local s = q
    if typeof(s) == "Instance" then
        if s.UserInputType == Enum.UserInputType.Keyboard and r.KeyCode == s.KeyCode then
            return true
        elseif tostring(s.UserInputType):find("MouseButton") and r.UserInputType == s.UserInputType then
            return true
        end
    end
    if tostring(s):find "MouseButton1" then
        return s == r.UserInputType
    else
        return s == r.KeyCode
    end
end
pcall(
    function()
        h.UserInputService.InputBegan:Connect(
            function(u, w)
                if o.destroyed then
                    return
                end
                if w then
                else
                    if not o.binding then
                        for y, z in next, o.binds do
                            local A = z.location[y]
                            if A and p(A, u) then
                                z.callback()
                            end
                        end
                    end
                end
            end
        )
    end
)
local B = {}
function B:Tween(C, t, data)
    h.TweenService:Create(C, TweenInfo.new(t[1], Enum.EasingStyle[t[2]], Enum.EasingDirection[t[3]]), data):Play()
    return true
end
function B:HoverEffect(C)
    Btn.MouseEnter:Connect(
        function()
            self:Tween(Btn, {0.15, "Sine", "InOut"}, {BackgroundTransparency = 0.3})
        end
    )
    Btn.MouseLeave:Connect(
        function()
            self:Tween(Btn, {0.15, "Sine", "InOut"}, {BackgroundTransparency = 0})
        end
    )
end
function B:Ripple(C)
    spawn(
        function()
            if C.ClipsDescendants ~= true then
                C.ClipsDescendants = true
            end
            local D = Instance.new("ImageLabel")
            D.Name = "Ripple"
            D.Parent = C
            D.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
            D.BackgroundTransparency = 1.000
            D.ZIndex = 8
            D.Image = "rbxassetid://2708891598"
            D.ImageTransparency = 0.800
            D.ScaleType = Enum.ScaleType.Fit
            D.ImageColor3 = g.accent
            D.Position =
                UDim2.new(
                (n.X - D.AbsolutePosition.X) / C.AbsoluteSize.X,
                0,
                (n.Y - D.AbsolutePosition.Y) / C.AbsoluteSize.Y,
                0
            )
            self:Tween(
                D,
                {.3, "Linear", "InOut"},
                {Position = UDim2.new(-5.5, 0, -5.5, 0), Size = UDim2.new(12, 0, 12, 0)}
            )
            wait(0.15)
            self:Tween(D, {.3, "Linear", "InOut"}, {ImageTransparency = 1})
            wait(.3)
            D:Destroy()
        end
    )
end
function B:Drag(E, F)
    if not F then
        F = E
    end
    local G
    local H
    local I
    local J
    local function K(u)
        local L = u.Position - I
        E.Position = UDim2.new(J.X.Scale, J.X.Offset + L.X, J.Y.Scale, J.Y.Offset + L.Y)
    end
    F.InputBegan:Connect(
        function(u)
            if u.UserInputType == Enum.UserInputType.MouseButton1 then
                G = true
                I = u.Position
                J = E.Position
                u.Changed:Connect(
                    function()
                        if u.UserInputState == Enum.UserInputState.End then
                            G = false
                        end
                    end
                )
            end
        end
    )
    E.InputChanged:Connect(
        function(u)
            if u.UserInputType == Enum.UserInputType.MouseMovement then
                H = u
            end
        end
    )
    h.UserInputService.InputChanged:Connect(
        function(u)
            if u == H and G then
                K(u)
            end
        end
    )
end
local M = false
function B:ChangeTab(N)
    if M then
        return
    end
    local O, P = N[1], N[2]
    if not O or not P then
        return
    end
    if o.tabinfo.button == O then
        return
    end
    M = true
    local Q, R = o.tabinfo.button, o.tabinfo.tab
    local S, T = Q.TabIcon, O.TabIcon
    o.tabinfo = {button = O, tab = P}
    local U = P.Parent
    if U.ClipsDescendants == false then
        U.ClipsDescendants = true
    end
    local V = U.Size
    self:Tween(U, {0.3, "Sine", "InOut"}, {Size = UDim2.new(V.X.Scale, V.X.Offset, 0, 0)})
    self:Tween(Q, {0.3, "Sine", "InOut"}, {TextColor3 = g.accent2})
    self:Tween(S, {0.3, "Sine", "InOut"}, {ImageColor3 = g.accent2})
    wait(0.3)
    R.Visible = false
    P.Visible = true
    self:Tween(U, {0.3, "Sine", "InOut"}, {Size = V})
    self:Tween(O, {0.3, "Sine", "InOut"}, {TextColor3 = g.accent})
    self:Tween(T, {0.3, "Sine", "InOut"}, {ImageColor3 = g.accent})
    wait(0.3)
    M = false
end
function o:UpdateSlider(W, k, X, Y)
    local Z = self.objstorage[W]
    local _ = Z.SliderBar
    local a0 = Z.SliderValHolder.SliderVal
    local a1 = (n.X - _.AbsolutePosition.X) / _.AbsoluteSize.X
    if k then
        a1 = (k - X) / (Y - X)
    end
    a1 = math.clamp(a1, 0, 1)
    k = k or math.floor(X + (Y - X) * a1)
    a0.Text = tostring(k)
    B:Tween(_.SliderFill, {0.05, "Linear", "InOut"}, {Size = UDim2.new(a1, 0, 1, 0)})
    self.flags[W] = tonumber(k)
    self.funcstorage[W](tonumber(k))
end
function o:UpdateToggle(W, k)
    if not o.objstorage[W] then
        return
    end
    local a2 = o.flags[W]
    local C = o.objstorage[W]
    local a3 = o.funcstorage[W]
    if a2 == k then
        return
    end
    if not k then
        k = not a2
    end
    o.flags[W] = k
    local a4 = C.ToggleDisplay.ToggleDisplayFill
    local a5 = UDim2.new(0, 3, 0.5, 0)
    local a6 = UDim2.new(0, 17, 0.5, 0)
    spawn(
        function()
            B:Tween(a4, {0.15, "Sine", "InOut"}, {Size = UDim2.new(0, 24, 0, 16)})
            wait(.15)
            B:Tween(a4, {0.15, "Sine", "InOut"}, {Size = UDim2.new(0, 24, 0, 20)})
        end
    )
    B:Tween(a4, {0.3, "Sine", "InOut"}, {Position = k and a6 or a5, BackgroundColor3 = k and g.accent or g.main})
    spawn(
        function()
            a3(k)
        end
    )
end
function o:Init(a7)
    local a8 = Instance.new("ScreenGui")
    local a9 = Instance.new("Frame")
    local aa = Instance.new("UICorner")
    local ab = Instance.new("Frame")
    local ac = Instance.new("UICorner")
    local ad = Instance.new("TextLabel")
    local ae = Instance.new("Frame")
    local af = Instance.new("UICorner")
    local ag = Instance.new("ScrollingFrame")
    local ah = Instance.new("UIListLayout")
    local ai = Instance.new("UIPadding")
    local aj = Instance.new("Frame")
    local ak = Instance.new("UICorner")
    if syn and syn.protect_gui then
        syn.protect_gui(a8)
    end
    a8.Name = h.HttpService:GenerateGUID()
    a8.Parent = gethui and gethui() or get_hidden_gui and get_hidden_gui() or h.CoreGui
    a8.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    o.ui = a8
    a9.Name = "Main"
    a9.Parent = a8
    a9.BackgroundColor3 = g.secondary
    a9.BorderSizePixel = 0
    a9.Position = UDim2.new(0.297788322, 0, 0.0769230798, 0)
    a9.Size = UDim2.new(0, 609, 0, 505)
    a9.ClipsDescendants = true
    local al = true
    function o.toggleui()
        al = not al
        spawn(
            function()
                if al then
                    wait(0.3)
                end
            end
        )
        B:Tween(a9, {0.3, "Sine", "InOut"}, {Size = UDim2.new(0, 609, 0, al and 505 or 0)})
    end
    aa.CornerRadius = UDim.new(0, 4)
    aa.Name = "MainC"
    aa.Parent = a9
    ab.Name = "Top"
    ab.Parent = a9
    ab.BackgroundColor3 = g.main
    ab.BorderSizePixel = 0
    ab.Position = UDim2.new(0, 6, 0, 6)
    ab.Size = UDim2.new(0, 597, 0, 46)
    B:Drag(a9, ab)
    ac.CornerRadius = UDim.new(0, 4)
    ac.Name = "TopC"
    ac.Parent = ab
    ad.Name = "Title"
    ad.Parent = ab
    ad.BackgroundColor3 = g.accent
    ad.BackgroundTransparency = 1.000
    ad.BorderSizePixel = 0
    ad.Position = UDim2.new(0.0234505869, 0, 0, 0)
    ad.Size = UDim2.new(0, 186, 0, 46)
    ad.Font = Enum.Font.GothamSemibold
    ad.Text = a7
    ad.TextColor3 = g.accent
    ad.TextSize = 16.000
    ad.TextXAlignment = Enum.TextXAlignment.Left
    ae.Name = "Side"
    ae.Parent = a9
    ae.BackgroundColor3 = g.main
    ae.BorderSizePixel = 0
    ae.Position = UDim2.new(0, 6, 0, 58)
    ae.Size = UDim2.new(0, 180, 0, 441)
    af.CornerRadius = UDim.new(0, 4)
    af.Name = "SideC"
    af.Parent = ae
    ag.Name = "BtnHolder"
    ag.Parent = ae
    ag.Active = true
    ag.BackgroundColor3 = g.accent
    ag.BackgroundTransparency = 1.000
    ag.BorderSizePixel = 0
    ag.Size = UDim2.new(0, 180, 0, 441)
    ag.ScrollBarThickness = 2
    ah.Name = "BtnHolderL"
    ah.Parent = ag
    ah.HorizontalAlignment = Enum.HorizontalAlignment.Center
    ah.SortOrder = Enum.SortOrder.LayoutOrder
    ah.Padding = UDim.new(0, 4)
    ai.Name = "BtnHolderP"
    ai.Parent = ag
    ai.PaddingTop = UDim.new(0, 4)
    aj.Name = "TabHolder"
    aj.Parent = a9
    aj.BackgroundColor3 = g.main
    aj.BorderSizePixel = 0
    aj.Position = UDim2.new(0, 192, 0, 58)
    aj.Size = UDim2.new(0, 411, 0, 441)
    ak.CornerRadius = UDim.new(0, 4)
    ak.Name = "TabHolderC"
    ak.Parent = aj
    ah:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
        function()
            ag.CanvasSize = UDim2.new(0, 0, 0, ah.AbsoluteContentSize.Y + 6)
        end
    )
    local am = {}
    function am:Tab(an, ao)
        local ap = Instance.new("TextButton")
        local aq = Instance.new("UICorner")
        local ar = Instance.new("ImageLabel")
        local as = Instance.new("ScrollingFrame")
        local at = Instance.new("UIListLayout")
        local au = Instance.new("UIPadding")
        ap.Name = "TabOpen"
        ap.Parent = ag
        ap.BackgroundColor3 = g.secondary
        ap.BackgroundTransparency = 1.000
        ap.BorderSizePixel = 0
        ap.Position = UDim2.new(-0.00277777785, 0, 0.00907029491, 0)
        ap.Size = UDim2.new(0, 164, 0, 30)
        ap.AutoButtonColor = false
        ap.Font = Enum.Font.GothamSemibold
        ap.Text = ("       %s"):format(an)
        ap.TextColor3 = o.tabinfo.button == nil and g.accent or g.accent2
        ap.TextSize = 14.000
        ap.TextXAlignment = Enum.TextXAlignment.Left
        aq.CornerRadius = UDim.new(0, 4)
        aq.Name = "TabOpenC"
        aq.Parent = ap
        ar.Name = "TabIcon"
        ar.Parent = ap
        ar.BackgroundTransparency = 1.000
        ar.Position = UDim2.new(0, 0, 0.166666672, 0)
        ar.Size = UDim2.new(0, 20, 0, 20)
        ar.Image = ("rbxassetid://%s"):format(ao or 4370341699)
        ar.ScaleType = Enum.ScaleType.Fit
        ar.ImageColor3 = o.tabinfo.button == nil and g.accent or g.accent2
        as.Name = "Tab"
        as.Parent = aj
        as.Active = true
        as.BackgroundColor3 = g.accent
        as.BackgroundTransparency = 1.000
        as.BorderSizePixel = 0
        as.Size = UDim2.new(0, 411, 0, 441)
        as.ScrollBarThickness = 2
        as.Visible = o.tabinfo.button == nil
        at.Name = "TabL"
        at.Parent = as
        at.HorizontalAlignment = Enum.HorizontalAlignment.Center
        at.SortOrder = Enum.SortOrder.LayoutOrder
        at.Padding = UDim.new(0, 8)
        au.Name = "TabP"
        au.Parent = as
        au.PaddingTop = UDim.new(0, 8)
        if o.tabinfo.button == nil then
            o.tabinfo.button = ap
            o.tabinfo.tab = as
        end
        ap.MouseButton1Click:Connect(
            function()
                spawn(
                    function()
                        B:Ripple(ap)
                    end
                )
                B:ChangeTab({ap, as})
            end
        )
        at:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
            function()
                as.CanvasSize = UDim2.new(0, 0, 0, at.AbsoluteContentSize.Y + 16)
            end
        )
        local av = {}
        function av:Section(aw)
            local ax = Instance.new("Frame")
            local ay = Instance.new("UICorner")
            local az = Instance.new("UIPadding")
            local aA = Instance.new("UIListLayout")
            local aB = Instance.new("TextLabel")
            ax.Name = "Section"
            ax.Parent = as
            ax.BackgroundColor3 = g.secondary
            ax.BorderSizePixel = 0
            ax.Position = UDim2.new(0.0231143553, 0, -0.981859386, 0)
            ax.Size = UDim2.new(0, 392, 0, 568)
            ay.CornerRadius = UDim.new(0, 4)
            ay.Name = "SectionC"
            ay.Parent = ax
            az.Name = "SectionP"
            az.Parent = ax
            az.PaddingTop = UDim.new(0, 8)
            aA.Name = "SectionL"
            aA.Parent = ax
            aA.HorizontalAlignment = Enum.HorizontalAlignment.Center
            aA.SortOrder = Enum.SortOrder.LayoutOrder
            aA.Padding = UDim.new(0, 8)
            aB.Name = "SectionTitle"
            aB.Parent = ax
            aB.BackgroundColor3 = g.accent
            aB.BackgroundTransparency = 1.000
            aB.BorderSizePixel = 0
            aB.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
            aB.Size = UDim2.new(0, 390, 0, 18)
            aB.Font = Enum.Font.GothamSemibold
            aB.Text = ("   %s"):format(aw)
            aB.TextColor3 = g.accent
            aB.TextSize = 14.000
            aB.TextXAlignment = Enum.TextXAlignment.Left
            aA:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                function()
                    ax.Size = UDim2.new(0, 392, 0, aA.AbsoluteContentSize.Y + 13)
                end
            )
            local aC = {}
            function aC:Button(aD, callback)
                assert(aD, "text is a required arg")
                local callback = callback or function()
                    end
                local Btn = Instance.new("TextButton")
                local aE = Instance.new("UICorner")
                Btn.Name = "Btn"
                Btn.Parent = ax
                Btn.BackgroundColor3 = g.main
                Btn.BorderSizePixel = 0
                Btn.Position = UDim2.new(-0.00382653065, 0, 0.568888903, 0)
                Btn.Size = UDim2.new(0, 382, 0, 42)
                Btn.AutoButtonColor = false
                Btn.Font = Enum.Font.GothamSemibold
                Btn.Text = ("   %s"):format(aD)
                Btn.TextColor3 = g.accent
                Btn.TextSize = 14.000
                Btn.TextXAlignment = Enum.TextXAlignment.Left
                aE.CornerRadius = UDim.new(0, 4)
                aE.Name = "BtnC"
                aE.Parent = Btn
                Btn.MouseButton1Click:Connect(
                    function()
                        spawn(
                            function()
                                B:Ripple(Btn)
                            end
                        )
                        spawn(callback)
                    end
                )
            end
            function aC:Label(aD)
                local aF = Instance.new("TextLabel")
                local aG = Instance.new("UICorner")
                aF.Name = "Label"
                aF.Parent = ax
                aF.BackgroundColor3 = g.main
                aF.BackgroundTransparency = 0
                aF.BorderSizePixel = 0
                aF.Position = UDim2.new(0.00255102036, 0, 0.0355555564, 0)
                aF.Size = UDim2.new(0, 382, 0, 26)
                aF.Font = Enum.Font.GothamSemibold
                aF.TextColor3 = g.accent
                aF.TextSize = 14.000
                aF.Text = aD
                aG.Name = "LabelC"
                aG.Parent = aF
                aG.CornerRadius = UDim.new(0, 4)
                return aF
            end
            function aC:Toggle(aD, W, aH, callback)
                assert(aD, "text is a required arg")
                assert(W, "flag is a required arg")
                local aH = aH or false
                local callback = callback or function()
                    end
                local aI = Instance.new("TextButton")
                local aJ = Instance.new("UICorner")
                local aK = Instance.new("Frame")
                local aL = Instance.new("UICorner")
                local aM = Instance.new("Frame")
                local aN = Instance.new("UICorner")
                aI.Name = "Toggle"
                aI.Parent = ax
                aI.BackgroundColor3 = g.main
                aI.BorderSizePixel = 0
                aI.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                aI.Size = UDim2.new(0, 382, 0, 42)
                aI.AutoButtonColor = false
                aI.Font = Enum.Font.GothamSemibold
                aI.Text = ("   %s"):format(aD)
                aI.TextColor3 = g.accent
                aI.TextSize = 14.000
                aI.TextXAlignment = Enum.TextXAlignment.Left
                aJ.CornerRadius = UDim.new(0, 4)
                aJ.Name = "ToggleC"
                aJ.Parent = aI
                aK.Name = "ToggleDisplay"
                aK.Parent = aI
                aK.BackgroundColor3 = g.secondary
                aK.BorderSizePixel = 0
                aK.Position = UDim2.new(0.846311867, 0, 0.190476194, 0)
                aK.Size = UDim2.new(0, 45, 0, 26)
                aL.CornerRadius = UDim.new(0, 4)
                aL.Name = "ToggleDisplayC"
                aL.Parent = aK
                aM.Name = "ToggleDisplayFill"
                aM.Parent = aK
                aM.AnchorPoint = Vector2.new(0, 0.5)
                aM.BackgroundColor3 = g.main
                aM.BorderSizePixel = 0
                aM.Position = UDim2.new(0, 3, 0.5, 0)
                aM.Size = UDim2.new(0, 24, 0, 20)
                aN.CornerRadius = UDim.new(0, 4)
                aN.Name = "ToggleDisplayFillC"
                aN.Parent = aM
                o.flags[W] = false
                o.funcstorage[W] = callback
                o.objstorage[W] = aI
                if aH ~= false then
                    o:UpdateToggle(W, true)
                end
                aK.InputBegan:Connect(
                    function(r)
                        if r.UserInputType == Enum.UserInputType.MouseButton1 then
                            o:UpdateToggle(W)
                        end
                    end
                )
            end
            function aC:Textbox(aD, W, aO, callback)
                assert(aD, "text is a required arg")
                assert(W, "flag is a required arg")
                local aO = aO or ""
                local callback = callback or function()
                    end
                o.flags[W] = aO
                local aP = Instance.new("TextButton")
                local aQ = Instance.new("UICorner")
                local aR = Instance.new("Frame")
                local aS = Instance.new("UIListLayout")
                local aT = Instance.new("TextBox")
                local aU = Instance.new("UICorner")
                aP.Name = "Textbox"
                aP.Parent = ax
                aP.BackgroundColor3 = g.main
                aP.BorderSizePixel = 0
                aP.Position = UDim2.new(-0.0382653065, 0, 0.903660059, 0)
                aP.Size = UDim2.new(0, 382, 0, 42)
                aP.AutoButtonColor = false
                aP.Font = Enum.Font.GothamSemibold
                aP.Text = ("   %s"):format(aD)
                aP.TextColor3 = g.accent
                aP.TextSize = 14.000
                aP.TextXAlignment = Enum.TextXAlignment.Left
                aQ.CornerRadius = UDim.new(0, 4)
                aQ.Name = "TextboxC"
                aQ.Parent = aP
                aR.Name = "TextboxValHolder"
                aR.Parent = aP
                aR.BackgroundColor3 = g.accent
                aR.BackgroundTransparency = 1.000
                aR.BorderSizePixel = 0
                aR.Position = UDim2.new(0.746835411, 0, 0, 0)
                aR.Size = UDim2.new(0, 84, 0, 42)
                aS.Name = "TextboxValHolderL"
                aS.Parent = aR
                aS.FillDirection = Enum.FillDirection.Horizontal
                aS.HorizontalAlignment = Enum.HorizontalAlignment.Right
                aS.SortOrder = Enum.SortOrder.LayoutOrder
                aS.VerticalAlignment = Enum.VerticalAlignment.Center
                aT.Name = "TextInp"
                aT.Parent = aR
                aT.BackgroundColor3 = g.secondary
                aT.BorderSizePixel = 0
                aT.Position = UDim2.new(-0.190476194, 0, 0.190476194, 0)
                aT.Size = UDim2.new(0, 100, 0, 26)
                aT.Font = Enum.Font.Gotham
                aT.Text = aO
                aT.TextColor3 = g.accent
                aT.TextSize = 14.000
                aT.Size = UDim2.new(0, aT.TextBounds.X + 14, 0, 26)
                aU.CornerRadius = UDim.new(0, 4)
                aU.Name = "TextInpC"
                aU.Parent = aT
                aT.FocusLost:Connect(
                    function()
                        if aT.Text == "" then
                            aT.Text = o.flags[W]
                        end
                        o.flags[W] = aT.Text
                        callback(aT.Text)
                    end
                )
                aT:GetPropertyChangedSignal("TextBounds"):Connect(
                    function()
                        B:Tween(aT, {0.1, "Linear", "InOut"}, {Size = UDim2.new(0, aT.TextBounds.X + 14, 0, 26)})
                    end
                )
            end
            function aC:Slider(aD, W, aO, X, Y, callback)
                assert(aD, "text is a required arg")
                assert(W, "flag is a required arg")
                assert(aO, "default is a required arg")
                assert(X, "min is a required arg")
                assert(Y, "min is a required arg")
                local k = aO or X
                o.flags[W] = k
                local callback = callback or function()
                    end
                local aV = Instance.new("TextButton")
                local aW = Instance.new("UICorner")
                local aX = Instance.new("TextLabel")
                local aY = Instance.new("Frame")
                local aZ = Instance.new("UICorner")
                local a_ = Instance.new("Frame")
                local b0 = Instance.new("UICorner")
                local b1 = Instance.new("Frame")
                local b2 = Instance.new("UIListLayout")
                local b3 = Instance.new("TextBox")
                local b4 = Instance.new("UICorner")
                aV.Name = "Slider"
                aV.Parent = ax
                aV.BackgroundColor3 = g.main
                aV.BorderSizePixel = 0
                aV.Position = UDim2.new(-0.00382653065, 0, 0.0355555564, 0)
                aV.Size = UDim2.new(0, 382, 0, 62)
                aV.AutoButtonColor = false
                aV.Font = Enum.Font.GothamSemibold
                aV.Text = ""
                aV.TextColor3 = g.accent
                aV.TextSize = 14.000
                aV.TextXAlignment = Enum.TextXAlignment.Left
                o.objstorage[W] = aV
                o.funcstorage[W] = callback
                aW.CornerRadius = UDim.new(0, 4)
                aW.Name = "SliderC"
                aW.Parent = aV
                aX.Name = "SliderText"
                aX.Parent = aV
                aX.BackgroundColor3 = g.accent
                aX.BackgroundTransparency = 1.000
                aX.BorderSizePixel = 0
                aX.Size = UDim2.new(0, 200, 0, 42)
                aX.Font = Enum.Font.GothamSemibold
                aX.Text = ("   %s"):format(aD)
                aX.TextColor3 = g.accent
                aX.TextSize = 14.000
                aX.TextXAlignment = Enum.TextXAlignment.Left
                aY.Name = "SliderBar"
                aY.Parent = aV
                aY.BackgroundColor3 = g.secondary
                aY.BorderSizePixel = 0
                aY.Position = UDim2.new(0, 9, 0, 42)
                aY.Size = UDim2.new(0, 363, 0, 10)
                aZ.CornerRadius = UDim.new(0, 4)
                aZ.Name = "SliderBarC"
                aZ.Parent = aY
                a_.Name = "SliderFill"
                a_.Parent = aY
                a_.BackgroundColor3 = g.accent
                a_.BorderSizePixel = 0
                a_.Size = UDim2.new(0, 0, 0, 10)
                b0.CornerRadius = UDim.new(0, 4)
                b0.Name = "SliderFillC"
                b0.Parent = a_
                b1.Name = "SliderValHolder"
                b1.Parent = aV
                b1.BackgroundColor3 = g.accent
                b1.BackgroundTransparency = 1.000
                b1.BorderSizePixel = 0
                b1.Position = UDim2.new(0.746835411, 0, 0, 0)
                b1.Size = UDim2.new(0, 84, 0, 42)
                b2.Name = "SliderValHolderL"
                b2.Parent = b1
                b2.FillDirection = Enum.FillDirection.Horizontal
                b2.HorizontalAlignment = Enum.HorizontalAlignment.Right
                b2.SortOrder = Enum.SortOrder.LayoutOrder
                b2.VerticalAlignment = Enum.VerticalAlignment.Center
                b3.Name = "SliderVal"
                b3.Parent = b1
                b3.BackgroundColor3 = g.secondary
                b3.BorderSizePixel = 0
                b3.Position = UDim2.new(0.452380955, 0, 0.142857149, 0)
                b3.Size = UDim2.new(0, 46, 0, 26)
                b3.Font = Enum.Font.Gotham
                b3.Text = k
                b3.TextColor3 = g.accent
                b3.TextSize = 14.000
                b4.CornerRadius = UDim.new(0, 4)
                b4.Name = "SliderValC"
                b4.Parent = b3
                b3.Size = UDim2.new(0, b3.TextBounds.X + 14, 0, 26)
                b3:GetPropertyChangedSignal("TextBounds"):Connect(
                    function()
                        B:Tween(b3, {0.1, "Linear", "InOut"}, {Size = UDim2.new(0, b3.TextBounds.X + 14, 0, 26)})
                    end
                )
                o:UpdateSlider(W, k, X, Y)
                local G = false
                aY.InputBegan:Connect(
                    function(u)
                        if u.UserInputType == Enum.UserInputType.MouseButton1 then
                            o:UpdateSlider(W, nil, X, Y)
                            G = true
                        end
                    end
                )
                aY.InputEnded:Connect(
                    function(u)
                        if u.UserInputType == Enum.UserInputType.MouseButton1 then
                            G = false
                        end
                    end
                )
                h.UserInputService.InputChanged:Connect(
                    function(u)
                        if G and u.UserInputType == Enum.UserInputType.MouseMovement then
                            o:UpdateSlider(W, nil, X, Y)
                        end
                    end
                )
                local b5 = false
                local b6 = {[""] = true, ["-"] = true}
                b3.Focused:Connect(
                    function()
                        b5 = true
                    end
                )
                b3.FocusLost:Connect(
                    function()
                        b5 = false
                        if not tonumber(b3.Text) then
                            o:UpdateSlider(W, aO or X, X, Y)
                        end
                    end
                )
                b3:GetPropertyChangedSignal("Text"):Connect(
                    function()
                        if not b5 then
                            return
                        end
                        b3.Text = b3.Text:gsub("%D+", "")
                        local aD = b3.Text
                        if not tonumber(aD) then
                            b3.Text = b3.Text:gsub("%D+", "")
                        elseif not b6[aD] then
                            if tonumber(aD) > Y then
                                aD = Y
                                b3.Text = tostring(Y)
                            end
                            o:UpdateSlider(W, tonumber(aD) or k, X, Y)
                        end
                    end
                )
            end
            function aC:Keybind(aD, W, aO, callback)
                assert(aD, "text is a required arg")
                assert(W, "flag is a required arg")
                assert(aO, "default is a required arg")
                local callback = callback or function()
                    end
                local b7 = {Return = true, Space = true, Tab = true, Unknown = true}
                local b8 = {
                    RightControl = "Right Ctrl",
                    LeftControl = "Left Ctrl",
                    LeftShift = "Left Shift",
                    RightShift = "Right Shift",
                    Semicolon = ";",
                    Quote = '"',
                    LeftBracket = "[",
                    RightBracket = "]",
                    Equals = "=",
                    Minus = "-",
                    RightAlt = "Right Alt",
                    LeftAlt = "Left Alt"
                }
                local b6 = {MouseButton1 = false, MouseButton2 = false}
                local b9 = aO and (b8[aO.Name] or aO.Name) or "None"
                o.flags[W] = aO or "None"
                local ba = Instance.new("TextButton")
                local bb = Instance.new("UICorner")
                local bc = Instance.new("Frame")
                local bd = Instance.new("UIListLayout")
                local be = Instance.new("TextButton")
                local bf = Instance.new("UICorner")
                ba.Name = "Keybind"
                ba.Parent = ax
                ba.BackgroundColor3 = g.main
                ba.BorderSizePixel = 0
                ba.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                ba.Size = UDim2.new(0, 382, 0, 42)
                ba.AutoButtonColor = false
                ba.Font = Enum.Font.GothamSemibold
                ba.Text = ("   %s"):format(aD)
                ba.TextColor3 = g.accent
                ba.TextSize = 14.000
                ba.TextXAlignment = Enum.TextXAlignment.Left
                bb.CornerRadius = UDim.new(0, 4)
                bb.Name = "KeybindC"
                bb.Parent = ba
                bc.Name = "SliderValHolder"
                bc.Parent = ba
                bc.BackgroundColor3 = g.accent
                bc.BackgroundTransparency = 1.000
                bc.BorderSizePixel = 0
                bc.Position = UDim2.new(0.746835411, 0, 0, 0)
                bc.Size = UDim2.new(0, 84, 0, 42)
                bd.Name = "SliderValHolderL"
                bd.Parent = bc
                bd.FillDirection = Enum.FillDirection.Horizontal
                bd.HorizontalAlignment = Enum.HorizontalAlignment.Right
                bd.SortOrder = Enum.SortOrder.LayoutOrder
                bd.VerticalAlignment = Enum.VerticalAlignment.Center
                be.Parent = bc
                be.BackgroundColor3 = g.secondary
                be.BorderSizePixel = 0
                be.Position = UDim2.new(0.357142866, 0, 0.190476194, 0)
                be.Size = UDim2.new(0, 0, 0, 26)
                be.AutoButtonColor = false
                be.Font = Enum.Font.Gotham
                be.Text = b9
                be.TextColor3 = g.accent
                be.TextSize = 14.000
                bf.CornerRadius = UDim.new(0, 4)
                bf.Name = "SliderValC"
                bf.Parent = Bind
                be.Size = UDim2.new(0, be.TextBounds.X + 14, 0, 26)
                be:GetPropertyChangedSignal("TextBounds"):Connect(
                    function()
                        B:Tween(be, {0.1, "Linear", "InOut"}, {Size = UDim2.new(0, be.TextBounds.X + 14, 0, 26)})
                    end
                )
                be.MouseButton1Click:Connect(
                    function()
                        o.binding = true
                        be.Text = "..."
                        local bg, bh = h.UserInputService.InputBegan:wait()
                        local aw = tostring(bg.KeyCode.Name)
                        local bi = tostring(bg.UserInputType.Name)
                        if
                            bg.UserInputType ~= Enum.UserInputType.Keyboard and b6[bg.UserInputType.Name] and
                                not data.KbOnly or
                                bg.KeyCode and not b7[bg.KeyCode.Name]
                         then
                            local aw =
                                bg.UserInputType ~= Enum.UserInputType.Keyboard and bg.UserInputType.Name or
                                bg.KeyCode.Name
                            o.flags[W] = bg
                            be.Text = b8[aw] or aw
                        else
                            if o.flags[W] then
                                if
                                    not pcall(
                                        function()
                                            return o.flags[W].UserInputType
                                        end
                                    )
                                 then
                                    local aw = tostring(o.flags[W])
                                    be.Text = b8[aw] or aw
                                else
                                    local aw =
                                        o.flags[W].UserInputType ~= Enum.UserInputType.Keyboard and
                                        o.flags[W].UserInputType.Name or
                                        o.flags[W].KeyCode.Name
                                    be.Text = b8[aw] or aw
                                end
                            end
                        end
                        wait(0.1)
                        o.binding = false
                    end
                )
                if o.flags[W] then
                    be.Text = b8[tostring(o.flags[W].Name)] or tostring(o.flags[W].Name)
                end
                o.binds[W] = {location = o.flags, callback = function()
                        callback()
                    end}
            end
            function aC:Dropdown(aD, W, bj, callback)
                assert(aD, "text is a required arg")
                assert(W, "flag is a required arg")
                assert(bj, "options is a required arg")
                if type(bj) ~= "table" then
                    bj = {"No Options Found"}
                end
                if #bj < 1 then
                    bj = {"No Options Found"}
                end
                local bk = {}
                local callback = callback or function()
                    end
                o.flags[W] = bj[1]
                local bl = Instance.new("TextButton")
                local bm = Instance.new("UICorner")
                local bn = Instance.new("ImageLabel")
                local bo = Instance.new("TextButton")
                local bp = Instance.new("UICorner")
                local bq = Instance.new("ScrollingFrame")
                local br = Instance.new("UIListLayout")
                local bs = Instance.new("UIPadding")
                bl.Name = "DropdownTop"
                bl.Parent = ax
                bl.BackgroundColor3 = g.main
                bl.BorderSizePixel = 0
                bl.Position = UDim2.new(-0.00382653065, 0, 0.346666664, 0)
                bl.Size = UDim2.new(0, 382, 0, 42)
                bl.AutoButtonColor = false
                bl.Font = Enum.Font.GothamSemibold
                bl.Text = ("   %s"):format(o.flags[W])
                bl.TextColor3 = g.accent
                bl.TextSize = 14.000
                bl.TextXAlignment = Enum.TextXAlignment.Left
                bm.CornerRadius = UDim.new(0, 4)
                bm.Name = "DropdownTopC"
                bm.Parent = bl
                bn.Name = "Back"
                bn.Parent = bl
                bn.BackgroundTransparency = 1.000
                bn.Position = UDim2.new(0.887434542, 0, 0.142857149, 0)
                bn.Rotation = -90.000
                bn.Size = UDim2.new(0, 30, 0, 30)
                bn.Image = "rbxassetid://4370337241"
                bn.ScaleType = Enum.ScaleType.Fit
                bn.ImageColor3 = g.accent
                bo.Name = "DropdownBottom"
                bo.Parent = ax
                bo.BackgroundColor3 = g.main
                bo.BorderSizePixel = 0
                bo.Position = UDim2.new(0.0127551025, 0, 0.616632879, 0)
                bo.Size = UDim2.new(0, 382, 0, 0)
                bo.AutoButtonColor = false
                bo.Font = Enum.Font.GothamSemibold
                bo.Text = ""
                bo.TextColor3 = g.accent
                bo.TextSize = 14.000
                bo.TextXAlignment = Enum.TextXAlignment.Left
                bo.Visible = false
                bp.CornerRadius = UDim.new(0, 4)
                bp.Name = "DropdownBottomC"
                bp.Parent = bo
                bq.Name = "DropdownObjects"
                bq.Parent = bo
                bq.Active = true
                bq.BackgroundColor3 = g.accent
                bq.BackgroundTransparency = 1.000
                bq.BorderSizePixel = 0
                bq.Size = UDim2.new(1, 0, 1, 0)
                bq.ScrollBarThickness = 2
                br.Name = "DropdownObjectsList"
                br.Parent = bq
                br.HorizontalAlignment = Enum.HorizontalAlignment.Center
                br.SortOrder = Enum.SortOrder.LayoutOrder
                br.Padding = UDim.new(0, 4)
                bs.Name = "DropdownObjectsPadding"
                bs.Parent = bq
                bs.PaddingTop = UDim.new(0, 4)
                br:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                    function()
                        bq.CanvasSize = UDim2.new(0, 0, 0, br.AbsoluteContentSize.Y + 7)
                    end
                )
                local bt = false
                local function bu()
                    bt = not bt
                    if not bt then
                        spawn(
                            function()
                                wait(.3)
                                bo.Visible = false
                            end
                        )
                    else
                        bo.Visible = true
                    end
                    local bv = 183
                    if br.AbsoluteContentSize.Y < bv then
                        bv = br.AbsoluteContentSize.Y
                    end
                    bl.Text = ("   %s"):format(bt and aD or o.flags[W])
                    B:Tween(bn, {0.3, "Sine", "InOut"}, {Rotation = bt and 90 or -90})
                    B:Tween(bo, {0.3, "Sine", "InOut"}, {Size = UDim2.new(0, 382, 0, bt and bv + 3 or 0)})
                end
                br:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(
                    function()
                        if not bt then
                            return
                        end
                        local bv = 183
                        if br.AbsoluteContentSize.Y < bv then
                            bv = br.AbsoluteContentSize.Y
                        end
                        bl.Text = ("   %s"):format(bt and aD or o.flags[W])
                        B:Tween(bn, {0.3, "Sine", "InOut"}, {Rotation = bt and 90 or -90})
                        B:Tween(bo, {0.3, "Sine", "InOut"}, {Size = UDim2.new(0, 382, 0, bt and bv + 3 or 0)})
                    end
                )
                bn.InputEnded:Connect(
                    function(r)
                        if r.UserInputType == Enum.UserInputType.MouseButton1 then
                            bu()
                        end
                    end
                )
                local bw = 0
                local bx = nil
                for by, v in pairs(bj) do
                    bw = bw + 1
                    local bz = Instance.new("TextButton")
                    table.insert(bk, bz)
                    if bw == 1 then
                        bx = bz
                    end
                    bz.Name = "Option"
                    bz.Parent = bq
                    bz.BackgroundColor3 = g.secondary
                    bz.BackgroundTransparency = 1.000
                    bz.BorderSizePixel = 0
                    bz.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                    bz.Size = UDim2.new(0, 372, 0, 26)
                    bz.AutoButtonColor = false
                    bz.Font = Enum.Font.GothamSemibold
                    bz.Text = v
                    bz.TextColor3 = bz == bx and g.accent or g.accent2
                    bz.TextSize = 14.000
                    bz.MouseButton1Click:Connect(
                        function()
                            if bz ~= bx then
                                bx.TextColor3 = g.accent2
                                bz.TextColor3 = g.accent
                                bx = bz
                            end
                            o.flags[W] = v
                            spawn(bu)
                            spawn(
                                function()
                                    callback(v)
                                end
                            )
                        end
                    )
                end
                local bA = {}
                function bA:refresh(bB)
                    for by, v in pairs(bk) do
                        v:Destroy()
                    end
                    bk = {}
                    bx = nil
                    bw = 0
                    for by, v in pairs(bB) do
                        bw = bw + 1
                        local bz = Instance.new("TextButton")
                        table.insert(bk, bz)
                        if bw == 1 then
                            bx = bz
                        end
                        bz.Name = "Option"
                        bz.Parent = bq
                        bz.BackgroundColor3 = g.secondary
                        bz.BackgroundTransparency = 1.000
                        bz.BorderSizePixel = 0
                        bz.Position = UDim2.new(0.285340309, 0, 0.0218579229, 0)
                        bz.Size = UDim2.new(0, 372, 0, 26)
                        bz.AutoButtonColor = false
                        bz.Font = Enum.Font.GothamSemibold
                        bz.Text = v
                        bz.TextColor3 = bz == bx and g.accent or g.accent2
                        bz.TextSize = 14.000
                        bz.MouseButton1Click:Connect(
                            function()
                                if bz ~= bx then
                                    bx.TextColor3 = g.accent2
                                    bz.TextColor3 = g.accent
                                    bx = bz
                                end
                                o.flags[W] = v
                                spawn(bu)
                                spawn(
                                    function()
                                        callback(v)
                                    end
                                )
                            end
                        )
                    end
                end
                return bA
            end
            return aC
        end
        return av
    end
    return am
end
local bC = o:Init("Knox Hub")
local bD = bC:Tab("Settings", "5182003557")
local bE = bD:Section("Credits")
bE:Label("Owner | Spade#0005")
bE:Label("Developer | xandu#6969")
local bE = bD:Section("UI Settings")
bE:Label("Version 1.0")
bE:Button(
    "Destroy GUI",
    function()
        o.destroy()
    end
)
bE:Keybind(
    "Toggle GUI",
    "tui",
    Enum.KeyCode.RightControl,
    function()
        o.toggleui()
    end
)
local bE = bD:Section("Game  Settings")
bE:Toggle(
    "Spoof Information",
    "Spoof Information",
    true,
    function(bF)
        if bF then
            Area = "Classified"
            game.ReplicatedStorage.wkspc.Location.Value = tostring(Area)
        else
            Area = "Colardo USA"
            game.ReplicatedStorage.wkspc.Location.Value = tostring(Area)
        end
    end
)
bE:Button(
    "Rejoin Game",
    function()
        local bG = game:GetService("TeleportService")
        local bH = game:GetService("Players").LocalPlayer
        bG:Teleport(game.PlaceId, bH)
    end
)
bE:Button(
    "Leave Game",
    function()
        game:shutdown()
    end
)
local bE = bD:Section("Discord Link")
local bE = bD:Section("https://discord.gg/ucz7DFSdqR")
bE:Button(
    "Copy Discord Link",
    function()
        setclipboard("https://discord.gg/ucz7DFSdqR")
    end
)
bE:Button(
    "Join Server",
    function()
        local function bI(bJ)
            local bK = game:GetService("HttpService")
            local bL = 6452
            local bM = bJ
            local bN
            bN =
                game:GetService("RunService").Stepped:Connect(
                function()
                    bL = bL + 1
                    spawn(
                        function()
                            local bO =
                                syn.request(
                                {
                                    Url = string.format("http://127.0.0.1:%s/rpc?v=1", bL),
                                    Method = "POST",
                                    Headers = {
                                        ["Origin"] = "https://discord.com",
                                        ["Content-Type"] = "application/json"
                                    },
                                    Body = bK:JSONEncode(
                                        {
                                            ["nonce"] = bK:GenerateGUID(false),
                                            ["args"] = {["invite"] = {["code"] = bM}, ["code"] = bM},
                                            ["cmd"] = "INVITE_BROWSER"
                                        }
                                    )
                                }
                            )
                        end
                    )
                    if bL == 6465 then
                        bN:Disconnect()
                    end
                end
            )
        end
        bI("ucz7DFSdqR")
    end
)
local bD = bC:Tab("Local Player", "")
local bP = bD:Section("Local Player")
function RandomPlr()
    tempPlrs = {}
    for b, v in pairs(game.Players:GetPlayers()) do
        if
            v and v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") and
                v.Team ~= game.Players.LocalPlayer.Team and
                v.Character:FindFirstChild("Spawned")
         then
            table.insert(tempPlrs, v)
        end
    end
    return tempPlrs[math.random(1, #tempPlrs)]
end
function SwitchToKnife()
    local bQ = game:GetService("VirtualInputManager")
    bQ:SendKeyEvent(true, 51, false, game)
    bQ:SendKeyEvent(false, 51, false, game)
end
function Knife()
    OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    local bR = math.random() > .6 and true or false
    Target = RandomPlr()
    game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(Target.Character.Head.CFrame * CFrame.new(0, 2, 3))
    SwitchToKnife()
    wait(.2)
    for b = 1, 20 do
        SwitchToKnife()
        wait()
        local bS = function()
            local bg = {}
            if
                not game.ReplicatedStorage.wkspc.Status.RoundOver.Value and
                    not game.ReplicatedStorage.wkspc.Status.Preparation.Value and
                    game.Players.LocalPlayer.Status.Team.Value ~= "Spectator"
             then
                for by, v in pairs(game.Players:GetChildren()) do
                    if
                        (v.Team ~= game.Players.LocalPlayer.Team or game.ReplicatedStorage.wkspc.FFA.Value) and
                            v ~= game.Players.LocalPlayer
                     then
                        if
                            v.Character and not v.Character:FindFirstChild("ShuckyHAX") and
                                v.Character:FindFirstChild("Spawned")
                         then
                            table.insert(bg, v)
                        end
                    end
                end
            end
            return bg
        end
        for by, v in pairs(bS()) do
            local bT = v.Character.Head.Position + Vector3.new(math.random(), math.random(), math.random())
            local bU =
                string.pack(
                debug.getconstant(
                    require(game:GetService("ReplicatedStorage").Modules.ClientFunctions).CreateProjectile,
                    105
                ),
                bT.X,
                bT.Y,
                bT.Z,
                tostring(game.Players.LocalPlayer.PlayerGui.GUI.Client.Variables.gun.Value),
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0
            )
            game.ReplicatedStorage.Events.HitPart:FireServer(v.Character.Head, bU)
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
    end
end
function Kill()
    local bS = function()
        local bg = {}
        if
            not game.ReplicatedStorage.wkspc.Status.RoundOver.Value and
                not game.ReplicatedStorage.wkspc.Status.Preparation.Value and
                game.Players.LocalPlayer.Status.Team.Value ~= "Spectator"
         then
            for by, v in pairs(game.Players:GetChildren()) do
                if
                    (v.Team ~= game.Players.LocalPlayer.Team or game.ReplicatedStorage.wkspc.FFA.Value) and
                        v ~= game.Players.LocalPlayer
                 then
                    if
                        v.Character and not v.Character:FindFirstChild("ShuckyHAX") and
                            v.Character:FindFirstChild("Spawned")
                     then
                        table.insert(bg, v)
                    end
                end
            end
        end
        return bg
    end
    for by, v in pairs(bS()) do
        local bT = v.Character.Head.Position + Vector3.new(math.random(), math.random(), math.random())
        local bU =
            string.pack(
            debug.getconstant(
                require(game:GetService("ReplicatedStorage").Modules.ClientFunctions).CreateProjectile,
                105
            ),
            bT.X,
            bT.Y,
            bT.Z,
            tostring(game.Players.LocalPlayer.PlayerGui.GUI.Client.Variables.gun.Value),
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0
        )
        game.ReplicatedStorage.Events.HitPart:FireServer(v.Character.Head, bU)
    end
end
local bV = workspace.CurrentCamera
local bW = game:GetService("Players")
local bX = bW.LocalPlayer
local bY = bX:GetMouse()
function ClosestPlayer()
    local bZ, Closest = math.huge
    for b, v in pairs(bW.GetPlayers(bW)) do
        if v ~= bX and v.Team ~= bX.Team and v.Character then
            local b_ = v.Character.FindFirstChild(v.Character, "Head")
            if b_ then
                local c0, c1 = bV.WorldToScreenPoint(bV, b_.Position)
                if c1 then
                    local MousePos, c2 = Vector2.new(bY.X, bY.Y), Vector2.new(c0.X, c0.Y)
                    local c3 = (c2 - MousePos).Magnitude
                    if c3 < bZ and c3 <= Client.Values.FOV then
                        bZ = c3
                        Closest = v
                    end
                end
            end
        end
    end
    return Closest
end
function GetAimPart()
    if Client.Values.AimPart == "Head" then
        return "Head"
    end
    if Client.Values.AimPart == "LowerTorso" then
        return "LowerTorso"
    end
    if Client.Values.AimPart == "Random" then
        if math.random(1, 4) == 1 then
            return "Head"
        else
            return "LowerTorso"
        end
    end
end
local c4 = getrawmetatable(game)
local c5 = c4.__namecall
local i = c4.__index
setreadonly(c4, false)
c4.__namecall =
    newcclosure(
    function(self, ...)
        local c6 = {...}
        NamecallMethod = getnamecallmethod()
        if tostring(NamecallMethod) == "FindPartOnRayWithIgnoreList" and Client.Toggles.WallBang then
            table.insert(c6[2], workspace.Map)
        end
        if NamecallMethod == "FindPartOnRayWithIgnoreList" and not checkcaller() and Client.Toggles.SilentAim then
            local c7 = ClosestPlayer()
            if c7 and c7.Character and c7.Character.FindFirstChild(c7.Character, GetAimPart()) then
                c6[1] =
                    Ray.new(bV.CFrame.Position, (c7.Character[GetAimPart()].Position - bV.CFrame.Position).Unit * 1000)
                return c5(self, unpack(c6))
            end
        end
        if tostring(NamecallMethod) == "FireServer" and tostring(self) == "ControlTurn" then
            if Client.Toggles.AntiAim == true then
                if Client.Values.LookMeth == "Look Up" then
                    c6[1] = 1.3962564026167
                end
                if Client.Values.LookMeth == "Look Down" then
                    c6[1] = -1.5962564026167
                end
                if Client.Values.LookMeth == "Torso In Legs" then
                    c6[1] = -6.1
                end
                return c5(self, unpack(c6))
            end
        end
        return c5(self, ...)
    end
)
setreadonly(c4, true)
local c8 = Drawing.new("Circle")
c8.Thickness = 2
c8.NumSides = 460
c8.Filled = false
c8.Transparency = 0.6
c8.Radius = Client.Values.FOV
c8.Color = Color3.new(255, 127, 127)
game:GetService("RunService").Stepped:Connect(
    function()
        if Client.Toggles.FireRate == true then
            Client.Modules.ClientEnvoirment.DISABLED = false
            Client.Modules.ClientEnvoirment.DISABLED2 = false
        end
        if Client.Toggles.NoRecoil == true then
            Client.Modules.ClientEnvoirment.recoil = 0
        end
        if Client.Toggles.NoSpread == true then
            Client.Modules.ClientEnvoirment.currentspread = 0
            Client.Modules.ClientEnvoirment.spreadmodifier = 0
        end
        if Client.Toggles.AlwaysAuto == true then
            Client.Modules.ClientEnvoirment.mode = "automatic"
        end
        if Client.Toggles.InfAmmo == true then
            debug.setupvalue(Client.Modules.ModsShit, 3, 70)
        end
        c8.Radius = Client.Values.FOV
        if Client.Toggles.FOV == true then
            c8.Visible = true
        else
            c8.Visible = false
        end
        c8.Position = game:GetService("UserInputService"):GetMouseLocation()
    end
)
spawn(
    function()
        while true do
            wait()
            if Client.Toggles.KillAura then
                for b, v in pairs(game.Players:GetPlayers()) do
                    if v and v ~= game.Players.LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
                        local Distance =
                            (game.Players.LocalPlayer.Character.PrimaryPart.Position - v.Character.PrimaryPart.Position).magnitude
                        if Distance <= 12 then
                            game:GetService("ReplicatedStorage").Events.FallDamage:FireServer(
                                1000,
                                v.Character:FindFirstChild("Hitbox")
                            )
                        end
                    end
                end
            end
        end
    end
)
game:GetService("RunService").Stepped:Connect(
    function()
        if Client.Toggles.CrazyArrows == true then
            if Client.Toggles.FFA == false then
                for b, v in pairs(game.Players:GetPlayers()) do
                    if v.Team ~= game.Players.LocalPlayer.Team and v ~= game.Players.LocalPlayer then
                        YesTable = {
                            [1] = game:GetService("Workspace").Map.Clips,
                            [2] = game:GetService("Workspace").Debris,
                            [3] = game.Players.LocalPlayer.Character,
                            [4] = game:GetService("Workspace")["Ray_Ignore"],
                            [5] = game:GetService("Workspace").Map.Spawns,
                            [6] = game:GetService("Workspace").Map.Ignore
                        }
                        for b, v in pairs(game.Players:GetPlayers()) do
                            if v.Character then
                                YesTable[6 + b] = v
                            end
                        end
                        local c9 = {
                            [1] = "Arrow",
                            [2] = 800,
                            [3] = v.Character.Head.Position,
                            [4] = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame,
                            [5] = 100,
                            [6] = 0,
                            [7] = 0,
                            [8] = 0,
                            [9] = "Crossbow",
                            [10] = game.Players.LocalPlayer.Character.HumanoidRootPart.Position,
                            [11] = false,
                            [13] = YesTable,
                            [15] = false,
                            [16] = 142.0182788372
                        }
                        local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                        ca:FireServer(c9)
                        Client.Modules.CreateProj(game.Players.LocalPlayer.Name, unpack(c9))
                    end
                end
            else
                for b, v in pairs(game.Players:GetPlayers()) do
                    if v ~= game.Players.LocalPlayer then
                        YesTable = {
                            [1] = game:GetService("Workspace").Map.Clips,
                            [2] = game:GetService("Workspace").Debris,
                            [3] = game.Players.LocalPlayer.Character,
                            [4] = game:GetService("Workspace")["Ray_Ignore"],
                            [5] = game:GetService("Workspace").Map.Spawns,
                            [6] = game:GetService("Workspace").Map.Ignore
                        }
                        for b, v in pairs(game.Players:GetPlayers()) do
                            if v.Character then
                                YesTable[6 + b] = v
                            end
                        end
                        local c9 = {
                            [1] = "Arrow",
                            [2] = 800,
                            [3] = v.Character.Head.Position,
                            [4] = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame,
                            [5] = 100,
                            [6] = 0,
                            [7] = 0,
                            [8] = 0,
                            [9] = "Crossbow",
                            [10] = game.Players.LocalPlayer.Character.HumanoidRootPart.Position,
                            [11] = false,
                            [13] = YesTable,
                            [15] = false,
                            [16] = 142.0182788372
                        }
                        local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                        ca:FireServer(c9)
                        Client.Modules.CreateProj(game.Players.LocalPlayer.Name, unpack(c9))
                    end
                end
            end
        end
    end
)
spawn(
    function()
        while true do
            wait(0.1)
            pcall(
                function()
                    if Client.Toggles.Baseball then
                        for b, v in pairs(game.Players:GetPlayers()) do
                            YesTable = {
                                [1] = game:GetService("Workspace").Map.Clips,
                                [2] = game:GetService("Workspace").Debris,
                                [3] = game.Players.LocalPlayer.Character,
                                [4] = game:GetService("Workspace")["Ray_Ignore"],
                                [5] = game:GetService("Workspace").Map.Spawns,
                                [6] = game:GetService("Workspace").Map.Ignore
                            }
                            for b, v in pairs(game.Players:GetPlayers()) do
                                if v.Character then
                                    YesTable[6 + b] = v
                                end
                            end
                            local c9 = {
                                [1] = "Baseball",
                                [2] = 173,
                                [3] = v.Character.Head.Position,
                                [4] = v.Character.HumanoidRootPart.CFrame + Vector3.new(-10, math.random(0, 15), 0),
                                [5] = 100,
                                [6] = 0,
                                [7] = 0,
                                [8] = 0,
                                [9] = "Baseball Launcher",
                                [10] = v.Character.HumanoidRootPart.Position,
                                [11] = false,
                                [13] = YesTable,
                                [15] = false,
                                [16] = 142.0182788372
                            }
                            local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                            ca:FireServer(c9)
                            Client.Modules.CreateProj(v.Name, unpack(c9))
                        end
                        for b, v in pairs(game.Players:GetPlayers()) do
                            YesTable = {
                                [1] = game:GetService("Workspace").Map.Clips,
                                [2] = game:GetService("Workspace").Debris,
                                [3] = game.Players.LocalPlayer.Character,
                                [4] = game:GetService("Workspace")["Ray_Ignore"],
                                [5] = game:GetService("Workspace").Map.Spawns,
                                [6] = game:GetService("Workspace").Map.Ignore
                            }
                            for b, v in pairs(game.Players:GetPlayers()) do
                                if v.Character then
                                    YesTable[6 + b] = v
                                end
                            end
                            local c9 = {
                                [1] = "Baseball",
                                [2] = 173,
                                [3] = v.Character.Head.Position,
                                [4] = v.Character.HumanoidRootPart.CFrame + Vector3.new(-10, math.random(0, 15), 0),
                                [5] = 100,
                                [6] = 0,
                                [7] = 0,
                                [8] = 0,
                                [9] = "Baseball Launcher",
                                [10] = v.Character.HumanoidRootPart.Position,
                                [11] = false,
                                [13] = YesTable,
                                [15] = false,
                                [16] = 142.0182788372
                            }
                            local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                            ca:FireServer(c9)
                            Client.Modules.CreateProj(v.Name, unpack(c9))
                        end
                    end
                end
            )
        end
    end
)
spawn(
    function()
        while true do
            wait(0)
            pcall(
                function()
                    if Client.Toggles.Snow then
                        for b, v in pairs(game.Players:GetPlayers()) do
                            YesTable = {
                                [1] = game:GetService("Workspace").Map.Clips,
                                [2] = game:GetService("Workspace").Debris,
                                [3] = game.Players.LocalPlayer.Character,
                                [4] = game:GetService("Workspace")["Ray_Ignore"],
                                [5] = game:GetService("Workspace").Map.Spawns,
                                [6] = game:GetService("Workspace").Map.Ignore
                            }
                            for b, v in pairs(game.Players:GetPlayers()) do
                                if v.Character then
                                    YesTable[6 + b] = v
                                end
                            end
                            local c9 = {
                                [1] = "Baseball",
                                [2] = 173,
                                [3] = v.Character.Head.Position,
                                [4] = v.Character.HumanoidRootPart.CFrame + Vector3.new(-10, math.random(0, 15), 0),
                                [5] = 100,
                                [6] = 0,
                                [7] = 0,
                                [8] = 0,
                                [9] = "Snowball",
                                [10] = v.Character.HumanoidRootPart.Position,
                                [11] = false,
                                [13] = YesTable,
                                [15] = false,
                                [16] = 142.0182788372
                            }
                            local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                            ca:FireServer(c9)
                            Client.Modules.CreateProj(v.Name, unpack(c9))
                            YesTable = {
                                [1] = game:GetService("Workspace").Map.Clips,
                                [2] = game:GetService("Workspace").Debris,
                                [3] = game.Players.LocalPlayer.Character,
                                [4] = game:GetService("Workspace")["Ray_Ignore"],
                                [5] = game:GetService("Workspace").Map.Spawns,
                                [6] = game:GetService("Workspace").Map.Ignore
                            }
                            for b, v in pairs(game.Players:GetPlayers()) do
                                if v.Character then
                                    YesTable[6 + b] = v
                                end
                            end
                            local c9 = {
                                [1] = "Baseball",
                                [2] = 173,
                                [3] = v.Character.Head.Position,
                                [4] = v.Character.HumanoidRootPart.CFrame + Vector3.new(-10, math.random(0, 15), 0),
                                [5] = 100,
                                [6] = 0,
                                [7] = 0,
                                [8] = 0,
                                [9] = "Snowball",
                                [10] = v.Character.HumanoidRootPart.Position,
                                [11] = false,
                                [13] = YesTable,
                                [15] = false,
                                [16] = 142.0182788372
                            }
                            local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                            ca:FireServer(c9)
                            Client.Modules.CreateProj(v.Name, unpack(c9))
                        end
                    end
                    if Client.Toggles.Bombs then
                        for b, v in pairs(game.Players:GetPlayers()) do
                            YesTable = {
                                [1] = game:GetService("Workspace").Map.Clips,
                                [2] = game:GetService("Workspace").Debris,
                                [3] = game.Players.LocalPlayer.Character,
                                [4] = game:GetService("Workspace")["Ray_Ignore"],
                                [5] = game:GetService("Workspace").Map.Spawns,
                                [6] = game:GetService("Workspace").Map.Ignore
                            }
                            for b, v in pairs(game.Players:GetPlayers()) do
                                if v.Character then
                                    YesTable[6 + b] = v
                                end
                            end
                            local c9 = {
                                [1] = "Baseball",
                                [2] = 173,
                                [3] = v.Character.Head.Position,
                                [4] = v.Character.HumanoidRootPart.CFrame + Vector3.new(-10, math.random(0, 15), 0),
                                [5] = 100,
                                [6] = 0,
                                [7] = 0,
                                [8] = 0,
                                [9] = "Flaming Pumpkin",
                                [10] = v.Character.HumanoidRootPart.Position,
                                [11] = false,
                                [13] = YesTable,
                                [15] = false,
                                [16] = 142.0182788372
                            }
                            local ca = game:GetService("ReplicatedStorage").Events.ReplicateProjectile
                            ca:FireServer(c9)
                            Client.Modules.CreateProj(v.Name, unpack(c9))
                        end
                    end
                end
            )
        end
    end
)
spawn(
    function()
        while true do
            wait(0)
            pcall(
                function()
                    if Client.Toggles.Trac then
                        for b, v in pairs(game.Players:GetPlayers()) do
                            if v ~= game.Players.LocalPlayer then
                                local cb =
                                    game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.Angles(0, 0, 0)
                                local cc = game.workspace.CurrentCamera.CFrame.lookVector
                                Camera = game.workspace.CurrentCamera
                                Camera = {CFrame = CFrame.new(Camera.CFrame.p, v.Character.Head.Position)}
                                x = Camera.CFrame.LookVector
                                YesTable = {
                                    [1] = game:GetService("Workspace").Map.Clips,
                                    [2] = game:GetService("Workspace").Debris,
                                    [3] = game.Players.LocalPlayer.Character,
                                    [4] = game:GetService("Workspace")["Ray_Ignore"],
                                    [5] = game:GetService("Workspace").Map.Spawns,
                                    [6] = game:GetService("Workspace").Map.Ignore
                                }
                                for b, v in pairs(game.Players:GetPlayers()) do
                                    if v.Character then
                                        YesTable[6 + b] = v
                                    end
                                end
                                local cc = x
                                local cd = YesTable
                                local ce = Color3.fromRGB(math.random(1, 255), math.random(1, 255), math.random(1, 255))
                                local cf = "Railgun"
                                local cg = game.Players.LocalPlayer.Character.PrimaryPart
                                local Target = game:GetService("ReplicatedStorage").Events.Trail
                                Target:FireServer(cb, cc, cd, ce, cf, cg)
                                Client.Modules.CretTrail(cb, cc, cd, ce, cf, cg, game.Players.LocalPlayer.Name)
                            end
                        end
                    end
                end
            )
        end
    end
)
spawn(
    function()
        while true do
            wait(0)
            pcall(
                function()
                    if Client.Toggles.Sight then
                        local cb = game.Players.LocalPlayer.Character.PrimaryPart.CFrame * CFrame.Angles(0, 0, 0)
                        local cc = game.workspace.CurrentCamera.CFrame.lookVector * 999
                        local cd = {
                            workspace.Map.Clips,
                            game.Workspace.Debris,
                            game.Players.LocalPlayer.Character,
                            game.Workspace.Ray_Ignore,
                            workspace.CurrentCamera,
                            game.Workspace:WaitForChild("Map"):WaitForChild("Spawns"),
                            game.Workspace:WaitForChild("Map"):WaitForChild("Ignore")
                        }
                        local ce = Color3.fromRGB(math.random(1, 255), math.random(1, 255), math.random(1, 255))
                        local cf = "Railgun"
                        local cg = game.Players.LocalPlayer.Character.PrimaryPart
                        local Target = game:GetService("ReplicatedStorage").Events.Trail
                        Target:FireServer(cb, cc, cd, ce, cf, cg)
                        Client.Modules.CretTrail(cb, cc, cd, ce, cf, cg, game.Players.LocalPlayer.Name)
                    end
                end
            )
        end
    end
)
spawn(
    function()
        while true do
            wait()
            if Client.Toggles.BHop == true then
                game.Players.LocalPlayer.Character.Humanoid.Jump = true
            end
            if Client.Toggles.JumpPower == true then
                game.Players.LocalPlayer.Character.Humanoid.JumpPower = Client.Values.JumpPower
            end
            if Client.Toggles.InstantRespawn == true then
                if
                    not game.Players.LocalPlayer.Character:FindFirstChild("Spawned") and
                        game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cam")
                 then
                    if game.Players.LocalPlayer.PlayerGui.Menew.Enabled == false then
                        game:GetService("ReplicatedStorage").Events.LoadCharacter:FireServer()
                        wait(0.5)
                    end
                end
            end
        end
    end
)
local ch = {enabled = false, freeforall = false, radius = 2500, wallcheck = true}
local l = game:GetService("Players")
local ci = l.LocalPlayer
local cj = game:GetService("UserInputService")
local n = ci:GetMouse()
local ck = game:GetService("RunService")
local cl = false
function GetMouse()
    return Vector2.new(n.X, n.Y)
end
cj.InputBegan:Connect(
    function(s)
        if s.UserInputType == Enum.UserInputType.MouseButton2 then
            cl = true
        end
    end
)
cj.InputEnded:Connect(
    function(s)
        if s.UserInputType == Enum.UserInputType.MouseButton2 then
            cl = false
        end
    end
)
function FreeForAll(cm)
    if ch.freeforall == false then
        if ci.Team == cm.Team then
            return false
        else
            return true
        end
    else
        return true
    end
end
function NotObstructing(cn, co)
    if ch.wallcheck then
        Origin = workspace.CurrentCamera.CFrame.p
        CheckRay = Ray.new(Origin, cn - Origin)
        Hit = workspace:FindPartOnRayWithIgnoreList(CheckRay, co)
        return Hit == nil
    else
        return true
    end
end
function GetClosestToCuror()
    MousePos = GetMouse()
    Radius = ch.radius
    Closest = math.huge
    Target = nil
    for by, v in pairs(game:GetService("Players"):GetPlayers()) do
        if FreeForAll(v) then
            if v.Character:FindFirstChild("Head") and v ~= game.Players.LocalPlayer then
                Point, OnScreen = workspace.CurrentCamera:WorldToViewportPoint(v.Character.Head.Position)
                clientchar = ci.Character
                if OnScreen and NotObstructing(v.Character.Head.Position, {clientchar, v.Character}) then
                    Distance = (Vector2.new(Point.X, Point.Y) - MousePos).magnitude
                    if Distance < math.min(Radius, Closest) then
                        Closest = Distance
                        Target = v
                    end
                end
            end
        end
    end
    return Target
end
ck.RenderStepped:Connect(
    function()
        if ch.enabled == false or cl == false then
            return
        end
        ClosestPlayer = GetClosestToCuror()
        if ClosestPlayer then
            workspace.CurrentCamera.CFrame =
                CFrame.new(workspace.CurrentCamera.CFrame.p, ClosestPlayer.Character.Head.CFrame.p)
        end
    end
)
ch.wallcheck = false
bP:Toggle(
    "Fly",
    "Fly",
    false,
    function(bF)
        repeat
            wait()
        until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and
            game.Players.LocalPlayer.Character:findFirstChild("Head") and
            game.Players.LocalPlayer.Character:findFirstChild("Humanoid")
        local bY = game.Players.LocalPlayer:GetMouse()
        repeat
            wait()
        until bY
        local bP = game.Players.LocalPlayer
        local cp = bP.Character.HumanoidRootPart
        local cq = bP.Character.Humanoid
        isFlying = false
        local cr = _G.Speed or 50
        local cs = {f = 0, b = 0, l = 0, r = 0}
        local ct = {f = 0, b = 0, l = 0, r = 0}
        local cu = 200
        function Fly()
            local cv = Instance.new("BodyGyro", cp)
            cv.P = 9e4
            cv.maxTorque = Vector3.new(9e9, 9e9, 9e9)
            cv.CFrame = cp.CFrame
            local cw = Instance.new("BodyVelocity", cp)
            cw.Velocity = Vector3.new(0, 0.1, 0)
            cw.maxForce = Vector3.new(9e9, 9e9, 9e9)
            repeat
                wait()
                cq.PlatformStand = true
                if cs.l + cs.r ~= 0 or cs.f + cs.b ~= 0 then
                    cr = _G.Speed
                    if cr > cu then
                        cr = cu
                    end
                elseif not (cs.l + cs.r ~= 0 or cs.f + cs.b ~= 0) and speed ~= 0 then
                    cr = cr - 50
                    if cr < 0 then
                        cr = 0
                    end
                end
                if cs.l + cs.r ~= 0 or cs.f + cs.b ~= 0 then
                    cw.Velocity =
                        (game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (cs.f + cs.b) +
                        game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(cs.l + cs.r, (cs.f + cs.b) * .2, 0).p -
                        game.Workspace.CurrentCamera.CoordinateFrame.p) *
                        cr
                    ct = {f = cs.f, b = cs.b, l = cs.l, r = cs.r}
                elseif (cs.l + cs.r == 0 or cs.f + cs.b == 0) and cr ~= 0 then
                    cw.Velocity =
                        (game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ct.f + ct.b) +
                        game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ct.l + ct.r, (ct.f + ct.b) * .2, 0).p -
                        game.Workspace.CurrentCamera.CoordinateFrame.p) *
                        cr
                else
                    cw.Velocity = Vector3.new(0, 0.1, 0)
                end
                cv.CFrame =
                    game.Workspace.CurrentCamera.CoordinateFrame *
                    CFrame.Angles(-math.rad((cs.f + cs.b) * 50 * cr / cu), 0, 0)
            until not isFlying
            local cr = 0
            local cs = {F = 0, B = 0, L = 0, R = 0}
            local ct = {F = 0, B = 0, L = 0, R = 0}
            cv:Destroy()
            cw:Destroy()
            cq.PlatformStand = false
        end
        local bY = bP:GetMouse()
        bY.KeyDown:Connect(
            function(cx)
                if cx:lower() == "w" then
                    isWDown = true
                    cs.f = 1
                elseif cx:lower() == "a" then
                    isADown = true
                    cs.l = -1
                elseif cx:lower() == "s" then
                    isSDown = true
                    cs.b = -1
                elseif cx:lower() == "d" then
                    isSDown = true
                    cs.r = 1
                end
            end
        )
        bY.KeyUp:Connect(
            function(cx)
                if cx:lower() == "w" then
                    isWDown = false
                    cs.f = 0
                elseif cx:lower() == "a" then
                    isADown = false
                    cs.l = 0
                elseif cx:lower() == "s" then
                    isSDown = false
                    cs.b = 0
                elseif cx:lower() == "d" then
                    isDDown = false
                    cs.r = 0
                end
            end
        )
        if not bF then
            isFlying = false
            cp.BodyGyro:Destroy()
            cp.BodyVelocity:Destroy()
            cq.PlatformStand = false
        else
            isFlying = true
            Fly()
        end
    end
)
bP:Slider(
    "Fly Speed",
    "Fly Speed",
    250,
    1,
    1000,
    function(cy)
        _G.Speed = cy
        iyflyspeed = _G.Speed
    end
)
_G.Speed = 250
bP:Slider(
    "WalkSpeed",
    "WalkSpeed",
    16,
    1,
    1000,
    function(cz)
        _G.WS = cz
        local cA = game:GetService("Players").LocalPlayer.Character.Humanoid
        cA:GetPropertyChangedSignal("WalkSpeed"):Connect(
            function()
                cA.WalkSpeed = _G.WS
            end
        )
        cA.WalkSpeed = _G.WS
    end
)
bP:Slider(
    "Jump Power",
    "Jump Power",
    50,
    1,
    1000,
    function(cz)
        _G.JP = cz
        local cA = game:GetService("Players").LocalPlayer.Character.Humanoid
        cA:GetPropertyChangedSignal("JumpPower"):Connect(
            function()
                cA.JumpPower = _G.JP
            end
        )
        cA.JumpPower = _G.JP
    end
)
bP:Toggle(
    "No Clip",
    "No Clip",
    false,
    function(bF)
        if bF == true then
            noclipping = true
            toggleNoClip()
        end
        if bF == false then
            noclipping = false
            toggleNoClip()
        end
    end
)
game:GetService("UserInputService").JumpRequest:connect(
    function()
        if _G.jumpinf then
            game:GetService "Players".LocalPlayer.Character:FindFirstChildOfClass "Humanoid":ChangeState("Jumping")
        end
    end
)
_G.jumpinf = false
bP:Toggle(
    "Inf Jump",
    "Inf Jump",
    false,
    function(cB)
        _G.jumpinf = cB
    end
)
bP:Slider(
    "Gravity",
    "Gravity",
    250,
    1,
    1000,
    function(cz)
        workspace.Gravity = cz
    end
)
local bD = bC:Tab("Misc", "")
local cC = bD:Section("Misc")
cC:Toggle(
    "Bhop",
    "Bhop",
    false,
    function(bF)
        Client.Toggles.BHop = bF
    end
)
cC:Toggle(
    "Instant Respawn",
    "Instant Respawn",
    false,
    function(bF)
        Client.Toggles.InstantRespawn = bF
    end
)
cC:Toggle(
    "Spin Bot",
    "Spin",
    false,
    function(bF)
        ___SpinnyValue = bF
    end
)
cC:Toggle(
    "Anti Aim",
    "Anti Aim",
    false,
    function(bF)
        Client.Toggles.AntiAim = bF
    end
)
cC:Dropdown(
    "Aim Methods",
    "Aim M",
    {"Look Up", "Look Down"},
    function(cD)
        Client.Values.LookMeth = cD
    end
)
local bD = bC:Tab("Combat", "")
local cE = bD:Section("Main")
cE:Toggle(
    "Silent Aim",
    "Silent Aim",
    false,
    function(bF)
        Client.Toggles.SilentAim = bF
    end
)
cE:Toggle(
    "Aimbot | Right Mouse Click",
    "Aimbot",
    false,
    function(t)
        ch.enabled = t
    end
)
cE:Dropdown(
    "Aim Part",
    "Aim Part",
    {"Aim Part", "Head", "LowerTorso", "Random"},
    function(cD)
        Client.Values.AimPart = cD
    end
)
local cE = bD:Section("Functions")
cE:Toggle(
    "Wall Check",
    "Wall Check",
    false,
    function(t)
        ch.wallcheck = t
    end
)
cE:Toggle(
    "Free For All",
    "Free For All",
    false,
    function(bF)
        ch.freeforall = t
    end
)
local cE = bD:Section("Field Of View")
cE:Toggle(
    "Draw Fov",
    "Draw Fov",
    false,
    function(bF)
        Client.Toggles.FOV = bF
    end
)
cE:Slider(
    "Size",
    "Size",
    250,
    1,
    1000,
    function(cF)
        Client.Values.FOV = cF
    end
)
cE:Slider(
    "Sides",
    "Sides",
    60,
    1,
    100,
    function(cF)
        c8.NumSides = cF
    end
)
cE:Slider(
    "Thickness",
    "Thickness",
    4,
    1,
    1000,
    function(cF)
        c8.Thickness = cF
    end
)
local bD = bC:Tab("Damage ", "")
local Kill = bD:Section("Kill All")
Kill:Toggle(
    "Auto Farm",
    "Auto Farm",
    false,
    function(bF)
        killall = bF
    end
)
local Kill = bD:Section("Gun Mods")
Kill:Toggle(
    "Firerate",
    "Firerate",
    false,
    function(bF)
        if bF then
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if cG.Name == "FireRate" or cG.Name == "BFireRate" then
                        cG.Value = 0.021
                    end
                end
            end
        else
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if cG.Name == "FireRate" or cG.Name == "BFireRate" then
                        cG.Value = 0.5
                    end
                end
            end
        end
    end
)
Kill:Toggle(
    "Ammo",
    "Ammo",
    false,
    function(bF)
        if bF then
            game:GetService("RunService").Stepped:connect(
                function()
                    game:GetService("Players").LocalPlayer.PlayerGui.GUI.Client.Variables.ammocount.Value = 999
                    game:GetService("Players").LocalPlayer.PlayerGui.GUI.Client.Variables.ammocount2.Value = 999
                end
            )
        else
            game:GetService("RunService").Stepped:connect(
                function()
                    game:GetService("Players").LocalPlayer.PlayerGui.GUI.Client.Variables.ammocount.Value = 30
                    game:GetService("Players").LocalPlayer.PlayerGui.GUI.Client.Variables.ammocount2.Value = 30
                end
            )
        end
    end
)
Kill:Toggle(
    "Automatic",
    "automatic",
    false,
    function(bF)
        if bF then
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if cG.Name == "Auto" then
                        cG.Value = true
                    end
                end
            end
        else
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if cG.Name == "Auto" then
                        cG.Value = false
                    end
                end
            end
        end
    end
)
Kill:Toggle(
    "FireRate",
    "FireRate",
    false,
    function(bF)
        if bF then
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if
                        cG.Name == "AReload" or cG.Name == "RecoilControl" or cG.Name == "EReload" or
                            cG.Name == "SReload" or
                            cG.Name == "ReloadTime" or
                            cG.Name == "EquipTime" or
                            cG.Name == "Spread" or
                            cG.Name == "MaxSpread"
                     then
                        cG.Value = 0.1
                    end
                end
            end
        else
            for b, v in next, game.ReplicatedStorage.Weapons:GetChildren() do
                for b, cG in next, v:GetChildren() do
                    for b, x in next, getconnections(cG.Changed) do
                        x:Disable()
                    end
                    if
                        cG.Name == "AReload" or cG.Name == "RecoilControl" or cG.Name == "EReload" or
                            cG.Name == "SReload" or
                            cG.Name == "ReloadTime" or
                            cG.Name == "EquipTime" or
                            cG.Name == "Spread" or
                            cG.Name == "MaxSpread"
                     then
                        cG.Value = 0.5
                    end
                end
            end
        end
    end
)
local Kill = bD:Section("Gun Further Mods")
Kill:Toggle(
    "Rainbow Gun",
    "Rainbow Gun",
    false,
    function(bF)
        _EEE = bF
    end
)
Kill:Toggle(
    "Rainbow Arms",
    "Rainbow Arms",
    false,
    function(bF)
        _EEEE = bF
    end
)
Kill:Toggle(
    "Rainbow Projectiles",
    "Rainbow Projectiles",
    false,
    function(bF)
        _EEEEE = bF
    end
)
local cH = {
    Visuals = {
        BoxEsp = false,
        TracerEsp = false,
        TracersOrigin = "Top",
        NameEsp = false,
        DistanceEsp = false,
        SkeletonEsp = false,
        EnemyColor = Color3.fromRGB(255, 0, 0),
        TeamColor = Color3.fromRGB(0, 255, 0),
        MurdererColor = Color3.fromRGB(255, 0, 0)
    }
}
local cI = {}
function cI:IsAlive(m)
    if m and m.Character and m.Character:FindFirstChild("Head") and workspace:FindFirstChild(m.Character.Name) then
        return true
    end
end
function cI:Round(cJ)
    return math.floor(tonumber(cJ) + 0.5)
end
function cI:DrawSquare()
    local cK = Drawing.new("Square")
    cK.Color = Color3.fromRGB(190, 190, 0)
    cK.Thickness = 0.5
    cK.Filled = false
    cK.Transparency = 1
    return cK
end
function cI:DrawLine()
    local cL = Drawing.new("Line")
    cL.Color = Color3.new(190, 190, 0)
    cL.Thickness = 0.5
    return cL
end
function cI:DrawText()
    local aD = Drawing.new("Text")
    aD.Color = Color3.fromRGB(190, 190, 0)
    aD.Size = 20
    aD.Outline = true
    aD.Center = true
    return aD
end
local cM =
    setmetatable(
    {LocalPlayer = game:GetService("Players").LocalPlayer, Camera = workspace.CurrentCamera},
    {__index = function(self, y)
            return rawget(self, y) or game:GetService(y)
        end}
)
function cI:AddEsp(m)
    local cK = cI:DrawSquare()
    local cN = cI:DrawLine()
    local cO = cI:DrawText()
    local Distance = cI:DrawText()
    local cP = cI:DrawLine()
    local cQ = cI:DrawLine()
    local cR = cI:DrawLine()
    local cS = cI:DrawLine()
    local cT = cI:DrawLine()
    local cU = cI:DrawLine()
    local cV = cI:DrawLine()
    local cW = cI:DrawLine()
    local cX = cI:DrawLine()
    local cY = cI:DrawLine()
    cM.RunService.Stepped:Connect(
        function()
            if cI:IsAlive(m) and m.Character:FindFirstChild("HumanoidRootPart") then
                local cZ, OnScreen = cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position)
                local c_ = cM.Camera:WorldToViewportPoint(m.Character.Head.Position + Vector3.new(0, 0.5, 0))
                local d0 = cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position - Vector3.new(0, 4, 0))
                if cH.Visuals.BoxEsp then
                    cK.Visible = OnScreen
                    cK.Size = Vector2.new(2350 / cZ.Z + 2.5, c_.Y - d0.Y)
                    cK.Position = Vector2.new(cZ.X - cK.Size.X / 2 - 1, cZ.Y - cK.Size.Y / 2)
                else
                    cK.Visible = false
                end
                if cH.Visuals.TracerEsp then
                    cN.Visible = OnScreen
                    if cH.Visuals.TracersOrigin == "Top" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, 0)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Middle" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, cM.Camera.ViewportSize.Y / 2)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2 - (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Bottom" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, 1000)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y - (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Mouse" then
                        cN.To = game:GetService("UserInputService"):GetMouseLocation()
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2 - (c_.Y - d0.Y) / 2
                        )
                    end
                else
                    cN.Visible = false
                end
                if cH.Visuals.NameEsp then
                    cO.Visible = OnScreen
                    cO.Position =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y - 40
                    )
                    cO.Text = "[ " .. m.Name .. " ]"
                else
                    cO.Visible = false
                end
                if cH.Visuals.DistanceEsp and m.Character:FindFirstChild("Head") then
                    Distance.Visible = OnScreen
                    Distance.Position =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y - 25
                    )
                    Distance.Text =
                        "[ " ..
                        cI:Round(
                            (game:GetService("Players").LocalPlayer.Character.Head.Position - m.Character.Head.Position).Magnitude
                        ) ..
                            " Studs ]"
                else
                    Distance.Visible = false
                end
                if cH.Visuals.SkeletonEsp then
                    cQ.Visible = OnScreen
                    cQ.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y
                    )
                    cQ.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cR.Visible = OnScreen
                    cR.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y +
                            (cM.Camera:WorldToViewportPoint(m.Character.UpperTorso.Position).Y -
                                cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y) /
                                3
                    )
                    cR.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).Y
                    )
                    cS.Visible = OnScreen
                    cS.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerArm.Position).Y
                    )
                    cS.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).Y
                    )
                    cT.Visible = OnScreen
                    cT.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y +
                            (cM.Camera:WorldToViewportPoint(m.Character.UpperTorso.Position).Y -
                                cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y) /
                                3
                    )
                    cT.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).Y
                    )
                    cU.Visible = OnScreen
                    cU.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerArm.Position).Y
                    )
                    cU.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).Y
                    )
                    cV.Visible = OnScreen
                    cV.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cV.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).Y
                    )
                    cW.Visible = OnScreen
                    cW.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerLeg.Position).Y
                    )
                    cW.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).Y
                    )
                    cX.Visible = OnScreen
                    cX.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerLeg.Position).Y
                    )
                    cX.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).Y
                    )
                    cY.Visible = OnScreen
                    cY.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cY.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).Y
                    )
                else
                    cQ.Visible = false
                    cR.Visible = false
                    cS.Visible = false
                    cT.Visible = false
                    cU.Visible = false
                    cV.Visible = false
                    cW.Visible = false
                    cX.Visible = false
                    cY.Visible = false
                end
                if game.Players.LocalPlayer.TeamColor ~= m.TeamColor then
                    cK.Color = cH.Visuals.EnemyColor
                    cN.Color = cH.Visuals.EnemyColor
                    cO.Color = cH.Visuals.EnemyColor
                    Distance.Color = cH.Visuals.EnemyColor
                    cQ.Color = cH.Visuals.EnemyColor
                    cR.Color = cH.Visuals.EnemyColor
                    cS.Color = cH.Visuals.EnemyColor
                    cT.Color = cH.Visuals.EnemyColor
                    cU.Color = cH.Visuals.EnemyColor
                    cV.Color = cH.Visuals.EnemyColor
                    cW.Color = cH.Visuals.EnemyColor
                    cX.Color = cH.Visuals.EnemyColor
                    cY.Color = cH.Visuals.EnemyColor
                else
                    cK.Color = cH.Visuals.TeamColor
                    cN.Color = cH.Visuals.TeamColor
                    cO.Color = cH.Visuals.TeamColor
                    Distance.Color = cH.Visuals.TeamColor
                    cQ.Color = cH.Visuals.TeamColor
                    cR.Color = cH.Visuals.TeamColor
                    cS.Color = cH.Visuals.TeamColor
                    cT.Color = cH.Visuals.TeamColor
                    cU.Color = cH.Visuals.TeamColor
                    cV.Color = cH.Visuals.TeamColor
                    cW.Color = cH.Visuals.TeamColor
                    cX.Color = cH.Visuals.TeamColor
                    cY.Color = cH.Visuals.TeamColor
                end
            else
                cK.Visible = false
                cN.Visible = false
                cO.Visible = false
                Distance.Visible = false
                cQ.Visible = false
                cR.Visible = false
                cS.Visible = false
                cT.Visible = false
                cU.Visible = false
                cV.Visible = false
                cW.Visible = false
                cX.Visible = false
                cY.Visible = false
            end
        end
    )
end
for b, v in pairs(cM.Players:GetPlayers()) do
    if v ~= cM.LocalPlayer then
        cI:AddEsp(v)
    end
end
cM.Players.PlayerAdded:Connect(
    function(m)
        if v ~= cM.LocalPlayer then
            cI:AddEsp(m)
        end
    end
)
local bD = bC:Tab("Visuals", "")
local d1 = bD:Section("Options")
d1:Toggle(
    "Tracer",
    "Tracer",
    false,
    function(bF)
        cH.Visuals.TracerEsp = bF
    end
)
d1:Dropdown(
    "Tracer Origin",
    "Tracer Origin",
    {"Top", "Middle", "Bottom", "Mouse"},
    function(d2)
        cH.Visuals.TracersOrigin = d2
    end
)
d1:Toggle(
    "Box",
    "Box",
    false,
    function(bF)
        cH.Visuals.BoxEsp = bF
    end
)
d1:Toggle(
    "Skeleton",
    "Skeleton",
    false,
    function(bF)
        cH.Visuals.SkeletonEsp = bF
    end
)
d1:Toggle(
    "Name",
    "Name",
    false,
    function(bF)
        cH.Visuals.NameEsp = bF
    end
)
d1:Toggle(
    "Distance",
    "Distance",
    false,
    function(bF)
        cH.Visuals.DistanceEsp = bF
    end
)
if killall then
    __TpAura()
end
if tpall then
    __KillAura()
end
spawn(
    function()
        while wait() do
            if ___WhizzValue then
                for by, v in pairs(game:GetService("Players"):GetPlayers()) do
                    local cb = v
                    local Target = game:GetService("ReplicatedStorage").Events.Whizz
                    Target:FireServer(cb)
                end
            end
        end
    end
)
spawn(
    function()
        while wait() do
            if cv2 then
                if game:GetService("ReplicatedStorage").wkspc.Status.RoundOver.Value == false then
                    wait(.01)
                    local d3 = game.Players.LocalPlayer.NRPBS
                    local d4 = game.workspace
                    if d3.Health.Value < 0 then
                        game:GetService("ReplicatedStorage").Events.LoadCharacter:FireServer()
                        d3.Health.Value = 100
                    end
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                        game.Players[epocname].Character.HumanoidRootPart.CFrame + Vector3.new(nil, 10, nil)
                    local d5 = math.huge
                    local cb = game.Players[epocname].Character.Hitbox
                    local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                    Target:FireServer(d5, cb)
                end
            end
        end
    end
)
spawn(
    function()
        while wait() do
            if bv01 then
                __AutoFarm()
            end
        end
    end
)
spawn(
    function()
        while wait(0.13) do
            if ___SpinnyValue then
                pcall(
                    function()
                        AnimationId = "754658275"
                        local d6 = Instance.new("Animation")
                        d6.AnimationId = "rbxassetid://" .. AnimationId
                        local d7 = game.Players.LocalPlayer.Character.Humanoid:LoadAnimation(d6)
                        d7:Play()
                        d7:AdjustSpeed(1.5)
                    end
                )
            end
        end
    end
)
local d8 = game:GetService("UserInputService")
local bg = false
d8.InputBegan:connect(
    function(d7)
        if d7.KeyCode == Enum.KeyCode.Space then
            bg = true
        end
    end
)
d8.InputEnded:connect(
    function(d7)
        if d7.KeyCode == Enum.KeyCode.Space then
            bg = false
        end
    end
)
spawn(
    function()
        while wait() do
            if __SpamiValue then
                local cf = TextChat
                local d9 = false
                local da = true
                local db = false
                local Target = game:GetService("ReplicatedStorage").Events.PlayerChatted
                Target:FireServer(cf, d9, da, db)
            end
        end
    end
)
counter = 0
function zigzag(dc)
    return math.acos(math.cos(dc * math.pi)) / math.pi
end
bg =
    game:GetService("RunService").Stepped:Connect(
    function()
        if __ChatEzValue then
            if __Cooldown then
                SavedKills = game:GetService("Players").LocalPlayer.ScoreFolder.Kills.Value
            end
            if game:GetService("Players").LocalPlayer.ScoreFolder.Kills.Value == SavedKills then
            else
                local cf = TextChat2
                local d9 = false
                local da = true
                local db = false
                local Target = game:GetService("ReplicatedStorage").Events.PlayerChatted
                Target:FireServer(cf, d9, da, db)
                SavedKills = game:GetService("Players").LocalPlayer.ScoreFolder.Kills.Value
            end
            __Cooldown = false
        else
            __Cooldown = true
        end
        if __ChatGGValue then
            if game:GetService("ReplicatedStorage").wkspc.Status.RoundOver.Value == true then
                if CooldownGG == true then
                    local cf = TextChat3
                    local d9 = false
                    local da = true
                    local db = false
                    local Target = game:GetService("ReplicatedStorage").Events.PlayerChatted
                    Target:FireServer(cf, d9, da, db)
                    CooldownGG = false
                end
            else
                CooldownGG = true
            end
        end
        if ___AntiAimivalue then
            if lookinglol == "Look Up" then
                local d5 = 1.3962564026167
                local Target = game:GetService("ReplicatedStorage").Events.ControlTurn
                Target:FireServer(d5)
            end
            if lookinglol == "Look Down" then
                local d5 = -1.5962564026167
                local Target = game:GetService("ReplicatedStorage").Events.ControlTurn
                Target:FireServer(d5)
            end
            if lookinglol == "Broken UpperTorso" then
                local d5 = -6.1
                local Target = game:GetService("ReplicatedStorage").Events.ControlTurn
                Target:FireServer(d5)
            end
        end
        if ___FastrespawnValue then
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Cam") then
                game:GetService("ReplicatedStorage").Events.LoadCharacter:FireServer()
            end
        end
        if bup2v1 == true then
            if game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
                if bg then
                    game.Players.LocalPlayer.Character.Humanoid.Jump = true
                end
            end
        end
        if __JP then
            game.Players.LocalPlayer.Character.Humanoid.JumpPower = jumppop
        end
        if __WL then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = walkpop
        end
        if _EEE then
            for b, v in pairs(game:GetService("Workspace").Camera.Arms:GetDescendants()) do
                if v:IsA("MeshPart") then
                    v.Color = Color3.fromHSV(zigzag(counter), 1, 1)
                    counter = counter + 0.0009
                end
            end
        end
        if _EEEE then
            for b, v in pairs(game:GetService("Workspace").Camera.Arms:GetDescendants()) do
                if v:IsA("Part") then
                    v.Color = Color3.fromHSV(zigzag(counter), 1, 1)
                    counter = counter + 0.0009
                end
            end
        end
        if _EEEEE then
            for b, v in pairs(game:GetService("Workspace")["Ray_Ignore"]:GetDescendants()) do
                if v:IsA("MeshPart") then
                    v.Color = Color3.fromHSV(zigzag(counter), 1, 1)
                    counter = counter + 0.0009
                end
                if v:IsA("Part") then
                    v.Color = Color3.fromHSV(zigzag(counter), 1, 1)
                    counter = counter + 0.0009
                end
            end
        end
        if killall then
            __TpAura()
        end
        if tpall then
            __KillAura()
        end
    end
)
function __AutoFarm()
    if game:GetService("ReplicatedStorage").wkspc.Status.RoundOver.Value == false then
        local cf = "Spectator"
        local Target = game:GetService("ReplicatedStorage").Events.JoinTeam
        Target:FireServer(cf)
        for by, v in pairs(game:GetService("Players"):GetPlayers()) do
            if v.Name ~= game:GetService("Players").LocalPlayer.Name then
                wait(.01)
                for b = 1, 6 do
                    wait()
                    pcall(
                        function()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =
                                v.Character.HumanoidRootPart.CFrame + Vector3.new(nil, 8, nil)
                        end
                    )
                    wait(.01)
                    pcall(
                        function()
                            local d5 = math.huge
                            local cb = v.Character.Hitbox
                            local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                            Target:FireServer(d5, cb)
                            local d5 = math.huge
                            local cb = v.Character.Hitbox
                            local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                            Target:FireServer(d5, cb)
                        end
                    )
                end
            end
        end
    end
end
function RadioCheck()
    Checking = 0
    for b, v in pairs(game:GetService("Players").LocalPlayer.Data.Emotes:GetChildren()) do
        if v.Name == "" or "" then
            if v.Value == "Megaphone" and "Boombox" then
                Checking = 1
            end
        end
    end
    if Checking == 0 then
        local dd = Instance.new("BindableFunction")
        dd.OnInvoke = callback
        game.StarterGui:SetCore(
            "SendNotification",
            {
                Title = "Error",
                Text = "Please Equip a Boombox or a Megaphone in your emotes",
                Duration = 5,
                Callback = dd
            }
        )
    end
end
function __KillAura()
    if game:GetService("ReplicatedStorage").wkspc.Status.RoundOver.Value == false then
        for b, v in pairs(game:GetService("Workspace"):GetChildren()) do
            if v:findFirstChild("Hitbox") then
                if
                    (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position - v.Hitbox.Position).Magnitude <
                        REange_
                 then
                    if v.Name ~= game:GetService("Players").LocalPlayer.Name then
                        local d5 = DmgValue
                        local cb = v.Hitbox
                        local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                        Target:FireServer(d5, cb)
                    end
                end
            end
        end
    end
end
function __TpAura()
    _G.range = 100000
    _G.Damage = 100
    for de, v in pairs(game:GetService("Players"):GetPlayers()) do
        if v.Name ~= game:GetService("Players").LocalPlayer.Name then
            if
                (game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position -
                    v.Character.HumanoidRootPart.Position).Magnitude < _G.range
             then
                if game:GetService("ReplicatedStorage").wkspc.TwoTeams.Value == true then
                    if v.Status.Team.Value == game.Players.LocalPlayer.Status.Team.Value then
                    else
                        game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =
                            v.Character.HumanoidRootPart.CFrame + Vector3.new(math.random(-5, 5), 1, math.random(-5, 5))
                        pcall(
                            function()
                                local df = _G.Damage
                                local dg = v.Character.Hitbox
                                local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                                Target:FireServer(df, dg)
                            end
                        )
                    end
                else
                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =
                        v.Character.HumanoidRootPart.CFrame + Vector3.new(math.random(-5, 5), 1, math.random(-5, 5))
                    pcall(
                        function()
                            local df = _G.Damage
                            local dg = v.Character.Hitbox
                            local Target = game:GetService("ReplicatedStorage").Events.FallDamage
                            Target:FireServer(df, dg)
                        end
                    )
                end
            end
        end
    end
    OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    local b = math.random() > .6 and true or false
    Target = RandomPlr()
    game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(Target.Character.Head.CFrame * CFrame.new(0, 2, 3))
    SwitchToKnife()
    wait(.2)
    for bh = 1, 20 do
        SwitchToKnife()
        wait()
        local dh = function()
            local d7 = {}
            if
                not game.ReplicatedStorage.wkspc.Status.RoundOver.Value and
                    not game.ReplicatedStorage.wkspc.Status.Preparation.Value and
                    game.Players.LocalPlayer.Status.Team.Value ~= "Spectator"
             then
                for de, v in pairs(game.Players:GetChildren()) do
                    if
                        (v.Team ~= game.Players.LocalPlayer.Team or game.ReplicatedStorage.wkspc.FFA.Value) and
                            v ~= game.Players.LocalPlayer
                     then
                        if
                            v.Character and not v.Character:FindFirstChild("ShuckyHAX") and
                                v.Character:FindFirstChild("Spawned")
                         then
                            table.insert(d7, v)
                        end
                    end
                end
            end
            return d7
        end
        for de, v in pairs(dh()) do
            local di = v.Character.Head.Position + Vector3.new(math.random(), math.random(), math.random())
            local dj =
                string.pack(
                debug.getconstant(
                    require(game:GetService("ReplicatedStorage").Modules.ClientFunctions).CreateProjectile,
                    105
                ),
                di.X,
                di.Y,
                di.Z,
                tostring(game.Players.LocalPlayer.PlayerGui.GUI.Client.Variables.gun.Value),
                1,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                1,
                0,
                0
            )
            game.ReplicatedStorage.Events.HitPart:FireServer(v.Character.Head, dj)
        end
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
    end
end
function InfoStealer()
    print("-- Info Stealer | User: " .. _G.Username .. " --")
    for b, v in pairs(game:GetService("Players")[_G.Username].Settings:GetChildren()) do
        if v.Name == "" or "" then
            if v:IsA("NumberValue") then
                print(v.Name .. ": " .. v.Value)
            end
            if v:IsA("StringValue") then
                print(v.Name .. ": " .. v.Value)
            end
            if v:IsA("BoolValue") then
                if v.Value then
                    print(v.Name .. ": true")
                else
                    print(v.Name .. ": false")
                end
            end
        end
    end
    print("-- Data Stealer --")
    for b, v in pairs(game:GetService("Players")[_G.Username].Data:GetChildren()) do
        if v:IsA("NumberValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("StringValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("BoolValue") then
            if v.Value then
                print(v.Name .. ": true")
            else
                print(v.Name .. ": false")
            end
        end
    end
    print("-- Emotes --")
    for b, v in pairs(game:GetService("Players")[_G.Username].Data.Emotes:GetChildren()) do
        if v:IsA("NumberValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("StringValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("BoolValue") then
            if v.Value then
                print(v.Name .. ": true")
            else
                print(v.Name .. ": false")
            end
        end
    end
    print("-- Bundles --")
    for b, v in pairs(game:GetService("Players")[_G.Username].Bundles:GetChildren()) do
        if v:IsA("StringValue") then
            print(v.Name)
        end
    end
    print("-- BattlePass --")
    for b, v in pairs(game:GetService("Players")[_G.Username]["Battle Pass"]:GetDescendants()) do
        if v:IsA("NumberValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("StringValue") then
            print(v.Name .. ": " .. v.Value)
        end
        if v:IsA("BoolValue") then
            if v.Value then
                print(v.Name .. ": true")
            else
                print(v.Name .. ": false")
            end
        end
    end
end
local cH = {
    Visuals = {
        BoxEsp = false,
        TracerEsp = false,
        TracersOrigin = "Top",
        NameEsp = false,
        DistanceEsp = false,
        SkeletonEsp = false,
        EnemyColor = Color3.fromRGB(255, 0, 0),
        TeamColor = Color3.fromRGB(0, 255, 0),
        MurdererColor = Color3.fromRGB(255, 0, 0)
    }
}
local cI = {}
function cI:IsAlive(m)
    if m and m.Character and m.Character:FindFirstChild("Head") and workspace:FindFirstChild(m.Character.Name) then
        return true
    end
end
function cI:Round(cJ)
    return math.floor(tonumber(cJ) + 0.5)
end
function cI:DrawSquare()
    local cK = Drawing.new("Square")
    cK.Color = Color3.fromRGB(190, 190, 0)
    cK.Thickness = 0.5
    cK.Filled = false
    cK.Transparency = 1
    return cK
end
function cI:DrawLine()
    local cL = Drawing.new("Line")
    cL.Color = Color3.new(190, 190, 0)
    cL.Thickness = 0.5
    return cL
end
function cI:DrawText()
    local aD = Drawing.new("Text")
    aD.Color = Color3.fromRGB(190, 190, 0)
    aD.Size = 20
    aD.Outline = true
    aD.Center = true
    return aD
end
local cM =
    setmetatable(
    {LocalPlayer = game:GetService("Players").LocalPlayer, Camera = workspace.CurrentCamera},
    {__index = function(self, y)
            return rawget(self, y) or game:GetService(y)
        end}
)
function cI:AddEsp(m)
    local cK = cI:DrawSquare()
    local cN = cI:DrawLine()
    local cO = cI:DrawText()
    local Distance = cI:DrawText()
    local cP = cI:DrawLine()
    local cQ = cI:DrawLine()
    local cR = cI:DrawLine()
    local cS = cI:DrawLine()
    local cT = cI:DrawLine()
    local cU = cI:DrawLine()
    local cV = cI:DrawLine()
    local cW = cI:DrawLine()
    local cX = cI:DrawLine()
    local cY = cI:DrawLine()
    cM.RunService.Stepped:Connect(
        function()
            if cI:IsAlive(m) and m.Character:FindFirstChild("HumanoidRootPart") then
                local cZ, OnScreen = cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position)
                local c_ = cM.Camera:WorldToViewportPoint(m.Character.Head.Position + Vector3.new(0, 0.5, 0))
                local d0 = cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position - Vector3.new(0, 4, 0))
                if cH.Visuals.BoxEsp then
                    cK.Visible = OnScreen
                    cK.Size = Vector2.new(2350 / cZ.Z + 2.5, c_.Y - d0.Y)
                    cK.Position = Vector2.new(cZ.X - cK.Size.X / 2 - 1, cZ.Y - cK.Size.Y / 2)
                else
                    cK.Visible = false
                end
                if cH.Visuals.TracerEsp then
                    cN.Visible = OnScreen
                    if cH.Visuals.TracersOrigin == "Top" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, 0)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Middle" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, cM.Camera.ViewportSize.Y / 2)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2 - (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Bottom" then
                        cN.To = Vector2.new(cM.Camera.ViewportSize.X / 2, 1000)
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y - (c_.Y - d0.Y) / 2
                        )
                    elseif cH.Visuals.TracersOrigin == "Mouse" then
                        cN.To = game:GetService("UserInputService"):GetMouseLocation()
                        cN.From =
                            Vector2.new(
                            cM.Camera:WorldToViewportPoint(m.Character.HumanoidRootPart.Position).X - 1,
                            cZ.Y + (c_.Y - d0.Y) / 2 - (c_.Y - d0.Y) / 2
                        )
                    end
                else
                    cN.Visible = false
                end
                if cH.Visuals.NameEsp then
                    cO.Visible = OnScreen
                    cO.Position =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y - 40
                    )
                    cO.Text = "[ " .. m.Name .. " ]"
                else
                    cO.Visible = false
                end
                if cH.Visuals.DistanceEsp and m.Character:FindFirstChild("Head") then
                    Distance.Visible = OnScreen
                    Distance.Position =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y - 25
                    )
                    Distance.Text =
                        "[ " ..
                        cI:Round(
                            (game:GetService("Players").LocalPlayer.Character.Head.Position - m.Character.Head.Position).Magnitude
                        ) ..
                            " Studs ]"
                else
                    Distance.Visible = false
                end
                if cH.Visuals.SkeletonEsp then
                    cQ.Visible = OnScreen
                    cQ.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y
                    )
                    cQ.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cR.Visible = OnScreen
                    cR.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y +
                            (cM.Camera:WorldToViewportPoint(m.Character.UpperTorso.Position).Y -
                                cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y) /
                                3
                    )
                    cR.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).Y
                    )
                    cS.Visible = OnScreen
                    cS.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerArm.Position).Y
                    )
                    cS.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperArm.Position).Y
                    )
                    cT.Visible = OnScreen
                    cT.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y +
                            (cM.Camera:WorldToViewportPoint(m.Character.UpperTorso.Position).Y -
                                cM.Camera:WorldToViewportPoint(m.Character.Head.Position).Y) /
                                3
                    )
                    cT.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).Y
                    )
                    cU.Visible = OnScreen
                    cU.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerArm.Position).Y
                    )
                    cU.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperArm.Position).Y
                    )
                    cV.Visible = OnScreen
                    cV.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cV.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).Y
                    )
                    cW.Visible = OnScreen
                    cW.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftLowerLeg.Position).Y
                    )
                    cW.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LeftUpperLeg.Position).Y
                    )
                    cX.Visible = OnScreen
                    cX.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightLowerLeg.Position).Y
                    )
                    cX.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).Y
                    )
                    cY.Visible = OnScreen
                    cY.From =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.LowerTorso.Position).Y
                    )
                    cY.To =
                        Vector2.new(
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).X,
                        cM.Camera:WorldToViewportPoint(m.Character.RightUpperLeg.Position).Y
                    )
                else
                    cQ.Visible = false
                    cR.Visible = false
                    cS.Visible = false
                    cT.Visible = false
                    cU.Visible = false
                    cV.Visible = false
                    cW.Visible = false
                    cX.Visible = false
                    cY.Visible = false
                end
                if game.Players.LocalPlayer.TeamColor ~= m.TeamColor then
                    cK.Color = cH.Visuals.EnemyColor
                    cN.Color = cH.Visuals.EnemyColor
                    cO.Color = cH.Visuals.EnemyColor
                    Distance.Color = cH.Visuals.EnemyColor
                    cQ.Color = cH.Visuals.EnemyColor
                    cR.Color = cH.Visuals.EnemyColor
                    cS.Color = cH.Visuals.EnemyColor
                    cT.Color = cH.Visuals.EnemyColor
                    cU.Color = cH.Visuals.EnemyColor
                    cV.Color = cH.Visuals.EnemyColor
                    cW.Color = cH.Visuals.EnemyColor
                    cX.Color = cH.Visuals.EnemyColor
                    cY.Color = cH.Visuals.EnemyColor
                else
                    cK.Color = cH.Visuals.TeamColor
                    cN.Color = cH.Visuals.TeamColor
                    cO.Color = cH.Visuals.TeamColor
                    Distance.Color = cH.Visuals.TeamColor
                    cQ.Color = cH.Visuals.TeamColor
                    cR.Color = cH.Visuals.TeamColor
                    cS.Color = cH.Visuals.TeamColor
                    cT.Color = cH.Visuals.TeamColor
                    cU.Color = cH.Visuals.TeamColor
                    cV.Color = cH.Visuals.TeamColor
                    cW.Color = cH.Visuals.TeamColor
                    cX.Color = cH.Visuals.TeamColor
                    cY.Color = cH.Visuals.TeamColor
                end
            else
                cK.Visible = false
                cN.Visible = false
                cO.Visible = false
                Distance.Visible = false
                cQ.Visible = false
                cR.Visible = false
                cS.Visible = false
                cT.Visible = false
                cU.Visible = false
                cV.Visible = false
                cW.Visible = false
                cX.Visible = false
                cY.Visible = false
            end
        end
    )
end
for b, v in pairs(cM.Players:GetPlayers()) do
    if v ~= cM.LocalPlayer then
        cI:AddEsp(v)
    end
end
cM.Players.PlayerAdded:Connect(
    function(m)
        if v ~= cM.LocalPlayer then
            cI:AddEsp(m)
        end
    end
)
return o
